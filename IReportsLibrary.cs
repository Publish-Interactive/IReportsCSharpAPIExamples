//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.2.0.0 (NJsonSchema v9.2.4.0) (http://NSwag.org)
// </auto-generated>
//----------------------

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Net.Http;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Newtonsoft.Json;

public partial class IReportsLibrary
    : IDisposable
{
    private string _baseUrl = "";

    private HttpClient _httpClient;

    public IReportsLibrary(string baseUrl, HttpClient httpClient)
    {
        _httpClient = httpClient;
        BaseUrl = baseUrl;
    }

    public string BaseUrl
    {
        get { return _baseUrl; }
        set { _baseUrl = value; }
    }

    partial void PrepareRequest(HttpClient client, HttpRequestMessage request, string url);
    partial void PrepareRequest(HttpClient client, HttpRequestMessage request, StringBuilder urlBuilder);
    partial void ProcessResponse(HttpClient client, HttpResponseMessage response);

    /// <summary>Uploads a file and makes it ready for processing</summary>
    /// <returns>The document uploaded successfully, but not processed. Returns the id to use in future requests.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<int> PostImportAsync(string libraryCode, string productCode, ProductImportDataModel body)
    {
        return PostImportAsync(libraryCode, productCode, body, CancellationToken.None);
    }

    /// <summary>Uploads a file and makes it ready for processing</summary>
    /// <param name="body"></param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="libraryCode"></param>
    /// <param name="productCode"></param>
    /// <returns>The document uploaded successfully, but not processed. Returns the id to use in future requests.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<int> PostImportAsync(
        string libraryCode,
        string productCode,
        ProductImportDataModel body,
        CancellationToken cancellationToken)
    {
        if (libraryCode == null)
            throw new ArgumentNullException("libraryCode");

        if (productCode == null)
            throw new ArgumentNullException("productCode");

        var urlBuilder_ = new StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/libraries/{libraryCode}/products/{productCode}/imports");
        urlBuilder_.Replace(
            "{libraryCode}",
            Uri.EscapeDataString(Convert.ToString(libraryCode, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace(
            "{productCode}",
            Uri.EscapeDataString(Convert.ToString(productCode, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new StringContent(JsonConvert.SerializeObject(body));
                content_.Headers.ContentType.MediaType = "multipart/mixed";
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("POST");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "202")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ = default(int);
                        try
                        {
                            result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<int>(responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ == "400")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The document is not provided or is not valid.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(int);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Gets the processed status of an import.</summary>
    /// <param name="productCode"></param>
    /// <param name="id">The id of the import job</param>
    /// <param name="libraryCode"></param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<ProductUploadStatusDataModel> GetImportStatusAsync(string libraryCode, string productCode, int id)
    {
        return this.GetImportStatusAsync(libraryCode, productCode, id, CancellationToken.None);
    }

    /// <summary>Gets the processed status of an import.</summary>
    /// <param name="productCode"></param>
    /// <param name="id">The id of the import job</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="libraryCode"></param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<ProductUploadStatusDataModel> GetImportStatusAsync(
        string libraryCode,
        string productCode,
        int id,
        CancellationToken cancellationToken)
    {
        if (libraryCode == null)
            throw new System.ArgumentNullException("libraryCode");

        if (productCode == null)
            throw new System.ArgumentNullException("productCode");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/libraries/{libraryCode}/products/{productCode}/imports/{id}");
        urlBuilder_.Replace(
            "{libraryCode}",
            Uri.EscapeDataString(Convert.ToString(libraryCode, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace(
            "{productCode}",
            Uri.EscapeDataString(Convert.ToString(productCode, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace("{id}", Uri.EscapeDataString(Convert.ToString(id, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ = default(ProductUploadStatusDataModel);
                        try
                        {
                            result_ =
                                Newtonsoft.Json.JsonConvert.DeserializeObject<ProductUploadStatusDataModel>(
                                    responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(ProductUploadStatusDataModel);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Gets the styles used during import of documents.</summary>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<ImportedDocumentStylesDataModel> GetImportStylesAsync()
    {
        return this.GetImportStylesAsync(CancellationToken.None);
    }

    /// <summary>Gets the styles used during import of documents.</summary>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<ImportedDocumentStylesDataModel> GetImportStylesAsync(CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/content/import/styles");

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ = default(ImportedDocumentStylesDataModel);
                        try
                        {
                            result_ =
                                Newtonsoft.Json.JsonConvert.DeserializeObject<ImportedDocumentStylesDataModel>(
                                    responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(ImportedDocumentStylesDataModel);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Updates the styles used during import of documents.</summary>
    /// <returns>The styles were successfully updated</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task PutImportStylesAsync(ImportStylesForm body)
    {
        return this.PutImportStylesAsync(body, CancellationToken.None);
    }

    /// <summary>Updates the styles used during import of documents.</summary>
    /// <param name="body"></param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>The styles were successfully updated</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task PutImportStylesAsync(ImportStylesForm body, CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/content/import/styles");

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body));
                content_.Headers.ContentType.MediaType = "application/json";
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("PUT");

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        return;
                    }
                    else if (status_ == "400")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The extension is not valid or the styles specified are not valid.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Authenticate by username and password</summary>
    /// <param name="username">The username to authenticate as</param>
    /// <param name="password">The password of the user to authenticate as</param>
    /// <returns>The authentication key to use in future API requests.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<string> GetAuthenticationTokenAsync(string username, string password)
    {
        return this.GetAuthenticationTokenAsync(username, password, CancellationToken.None);
    }

    /// <summary>Authenticate by username and password</summary>
    /// <param name="username">The username to authenticate as</param>
    /// <param name="password">The password of the user to authenticate as</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>The authentication key to use in future API requests.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<string> GetAuthenticationTokenAsync(
        string username,
        string password,
        CancellationToken cancellationToken)
    {
        if (username == null)
            throw new System.ArgumentNullException("username");

        if (password == null)
            throw new System.ArgumentNullException("password");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/authenticate?");
        urlBuilder_.Append("username=").Append(
            Uri.EscapeDataString(Convert.ToString(username, CultureInfo.InvariantCulture))).Append("&");
        urlBuilder_.Append("password=").Append(
            Uri.EscapeDataString(Convert.ToString(password, CultureInfo.InvariantCulture))).Append("&");
        urlBuilder_.Length--;

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ = default(string);
                        try
                        {
                            result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<string>(responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ == "400")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The username or password is invalid",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(string);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Search for products</summary>
    /// <param name="terms">The terms/words to search for within product content and metadata. Can contain logical operators e.g. AND, OR</param>
    /// <param name="categories">Deprecated, use CategoryPaths. When provided, filters the returned products to only include the products in the categories by category ID. When two categories are under the same top-level category, products in either category are returned ("OR"). When two categories are in different top-level categories, only products which are in both categories are returned ("AND")</param>
    /// <param name="categoryPaths">When provided, filters the returned products to only include the products in the categories by category path. When two categories are under the same top-level category, products in either category are returned ("OR"). When two categories are in different top-level categories, only products which are in both categories are returned ("AND")</param>
    /// <param name="orderBy">Specifies the order in which the products should be returned, as a comma-seperated string of fields. The field can be 'Title', 'Published', 'PublishedYear' and 'CanView' (license status), optionally followed by '.asc' (default), '.desc'</param>
    /// <param name="skip">The zero-based index of the product to start at. Used for paging</param>
    /// <param name="take">The number of product to retrieve this request. Used for paging. If the value is null (default), then the site's default pager number is used</param>
    /// <param name="includeUnlicensed">Whether to include products which are not licensed to the current user</param>
    /// <param name="includePrivate">Whether to include private products in the results, which the current user has a license to</param>
    /// <param name="includeComingSoon">Whether to include coming soon products in the results</param>
    /// <param name="includeArchived">Whether to include archived products in the results</param>
    /// <param name="includeDisabled">Whether to include disabled products in the results. This only works if the current user is a product administrator, and no terms are supplied</param>
    /// <param name="updatedSince">When set, results include reports that have been updated after the date given, UTC time zone.
    /// Note that UpdatedSince will not return reports that have only had the following edited since the date given:
    /// + uploading a content source document.
    /// + re-importing or importing an ids file.
    /// + marking a document as print copy or renaming an attachment.</param>
    /// <param name="maxAge">When set, results only include reports which are not older than the timespan indicated.
    /// Report age is determined from the published date.
    /// 
    /// Timespan must be a number between 0 and 99 followed by d, m or y.
    /// 
    /// E.g. "6m" for six months or "2y" for two years</param>
    /// <returns>A list of products</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<ProductSearchResults> GetProductsAsync(
        string terms,
        System.Collections.Generic.IEnumerable<int> categories,
        System.Collections.Generic.IEnumerable<string> categoryPaths,
        string orderBy,
        int? skip,
        int? take,
        bool? includeUnlicensed,
        bool? includePrivate,
        bool? includeComingSoon,
        bool? includeArchived,
        bool? includeDisabled,
        System.DateTime? updatedSince,
        string maxAge)
    {
        return this.GetProductsAsync(
            terms,
            categories,
            categoryPaths,
            orderBy,
            skip,
            take,
            includeUnlicensed,
            includePrivate,
            includeComingSoon,
            includeArchived,
            includeDisabled,
            updatedSince,
            maxAge,
            CancellationToken.None);
    }

    /// <summary>Search for products</summary>
    /// <param name="terms">The terms/words to search for within product content and metadata. Can contain logical operators e.g. AND, OR</param>
    /// <param name="categories">Deprecated, use CategoryPaths. When provided, filters the returned products to only include the products in the categories by category ID. When two categories are under the same top-level category, products in either category are returned ("OR"). When two categories are in different top-level categories, only products which are in both categories are returned ("AND")</param>
    /// <param name="categoryPaths">When provided, filters the returned products to only include the products in the categories by category path. When two categories are under the same top-level category, products in either category are returned ("OR"). When two categories are in different top-level categories, only products which are in both categories are returned ("AND")</param>
    /// <param name="orderBy">Specifies the order in which the products should be returned, as a comma-seperated string of fields. The field can be 'Title', 'Published', 'PublishedYear' and 'CanView' (license status), optionally followed by '.asc' (default), '.desc'</param>
    /// <param name="skip">The zero-based index of the product to start at. Used for paging</param>
    /// <param name="take">The number of product to retrieve this request. Used for paging. If the value is null (default), then the site's default pager number is used</param>
    /// <param name="includeUnlicensed">Whether to include products which are not licensed to the current user</param>
    /// <param name="includePrivate">Whether to include private products in the results, which the current user has a license to</param>
    /// <param name="includeComingSoon">Whether to include coming soon products in the results</param>
    /// <param name="includeArchived">Whether to include archived products in the results</param>
    /// <param name="includeDisabled">Whether to include disabled products in the results. This only works if the current user is a product administrator, and no terms are supplied</param>
    /// <param name="updatedSince">When set, results include reports that have been updated after the date given, UTC time zone.
    /// Note that UpdatedSince will not return reports that have only had the following edited since the date given:
    /// + uploading a content source document.
    /// + re-importing or importing an ids file.
    /// + marking a document as print copy or renaming an attachment.</param>
    /// <param name="maxAge">When set, results only include reports which are not older than the timespan indicated.
    /// Report age is determined from the published date.
    /// 
    /// Timespan must be a number between 0 and 99 followed by d, m or y.
    /// 
    /// E.g. "6m" for six months or "2y" for two years</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>A list of products</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<ProductSearchResults> GetProductsAsync(
        string terms,
        System.Collections.Generic.IEnumerable<int> categories,
        System.Collections.Generic.IEnumerable<string> categoryPaths,
        string orderBy,
        int? skip,
        int? take,
        bool? includeUnlicensed,
        bool? includePrivate,
        bool? includeComingSoon,
        bool? includeArchived,
        bool? includeDisabled,
        System.DateTime? updatedSince,
        string maxAge,
        CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/products?");
        if (terms != null)
            urlBuilder_.Append("Terms=").Append(
                            Uri.EscapeDataString(Convert.ToString(terms, CultureInfo.InvariantCulture)))
                        .Append("&");
        if (categories != null)
            foreach (var item_ in categories)
            {
                urlBuilder_.Append("Categories=")
                            .Append(Uri.EscapeDataString(Convert.ToString(item_, CultureInfo.InvariantCulture)))
                            .Append("&");
            }
        if (categoryPaths != null)
            foreach (var item_ in categoryPaths)
            {
                urlBuilder_.Append("CategoryPaths=")
                            .Append(Uri.EscapeDataString(Convert.ToString(item_, CultureInfo.InvariantCulture)))
                            .Append("&");
            }
        if (orderBy != null)
            urlBuilder_.Append("OrderBy=").Append(
                            Uri.EscapeDataString(Convert.ToString(orderBy, CultureInfo.InvariantCulture)))
                        .Append("&");
        if (skip != null)
            urlBuilder_.Append("Skip=").Append(
                            Uri.EscapeDataString(Convert.ToString(skip.Value, CultureInfo.InvariantCulture)))
                        .Append("&");
        if (take != null)
            urlBuilder_.Append("Take=").Append(
                            Uri.EscapeDataString(Convert.ToString(take.Value, CultureInfo.InvariantCulture)))
                        .Append("&");
        if (includeUnlicensed != null)
            urlBuilder_.Append("IncludeUnlicensed=")
                        .Append(
                            Uri.EscapeDataString(
                                Convert.ToString(includeUnlicensed.Value, CultureInfo.InvariantCulture)))
                        .Append("&");
        if (includePrivate != null)
            urlBuilder_.Append("IncludePrivate=")
                        .Append(
                            Uri.EscapeDataString(
                                Convert.ToString(includePrivate.Value, CultureInfo.InvariantCulture))).Append("&");
        if (includeComingSoon != null)
            urlBuilder_.Append("IncludeComingSoon=")
                        .Append(
                            Uri.EscapeDataString(
                                Convert.ToString(includeComingSoon.Value, CultureInfo.InvariantCulture)))
                        .Append("&");
        if (includeArchived != null)
            urlBuilder_.Append("IncludeArchived=")
                        .Append(
                            Uri.EscapeDataString(
                                Convert.ToString(includeArchived.Value, CultureInfo.InvariantCulture))).Append("&");
        if (includeDisabled != null)
            urlBuilder_.Append("IncludeDisabled=")
                        .Append(
                            Uri.EscapeDataString(
                                Convert.ToString(includeDisabled.Value, CultureInfo.InvariantCulture))).Append("&");
        if (updatedSince != null)
            urlBuilder_.Append("UpdatedSince=").Append(
                            Uri.EscapeDataString(updatedSince.Value.ToString("s", CultureInfo.InvariantCulture)))
                        .Append("&");
        if (maxAge != null)
            urlBuilder_.Append("MaxAge=").Append(
                            Uri.EscapeDataString(Convert.ToString(maxAge, CultureInfo.InvariantCulture)))
                        .Append("&");
        urlBuilder_.Length--;

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ = default(ProductSearchResults);
                        try
                        {
                            result_ =
                                Newtonsoft.Json.JsonConvert.DeserializeObject<ProductSearchResults>(responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(ProductSearchResults);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Get all current product links</summary>
    /// <returns>Successful operation</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<System.Collections.ObjectModel.ObservableCollection<ProductLinkModel>> GetAllProductLinksAsync()
    {
        return this.GetAllProductLinksAsync(CancellationToken.None);
    }

    /// <summary>Get all current product links</summary>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<System.Collections.ObjectModel.ObservableCollection<ProductLinkModel>> GetAllProductLinksAsync(
        CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/products/links");

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ =
                            default(System.Collections.ObjectModel.ObservableCollection<ProductLinkModel>);
                        try
                        {
                            result_ = Newtonsoft
                                .Json.JsonConvert
                                .DeserializeObject<System.Collections.ObjectModel.ObservableCollection<
                                    ProductLinkModel>>(responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(System.Collections.ObjectModel.ObservableCollection<ProductLinkModel>);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Create a product link</summary>
    /// <param name="body">The details of the link</param>
    /// <returns>Successful operation</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<ProductLinkDetailsModel> PostProductLinkAsync(ProductLinkDetailsForm body)
    {
        return this.PostProductLinkAsync(body, CancellationToken.None);
    }

    /// <summary>Create a product link</summary>
    /// <param name="body">The details of the link</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<ProductLinkDetailsModel> PostProductLinkAsync(
        ProductLinkDetailsForm body,
        CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/products/links");

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body));
                content_.Headers.ContentType.MediaType = "application/json";
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("POST");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "201")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ = default(ProductLinkDetailsModel);
                        try
                        {
                            result_ =
                                Newtonsoft.Json.JsonConvert.DeserializeObject<ProductLinkDetailsModel>(
                                    responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ == "400")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "Product conflicts with another link group",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            $"The HTTP status code of the response was not expected ({response_.StatusCode}).",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(ProductLinkDetailsModel);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Get the type of link and the products linked</summary>
    /// <param name="id">The id of the link</param>
    /// <returns>Successful operation</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<ProductLinkDetailsModel> GetProductLinkAsync(int id)
    {
        return this.GetProductLinkAsync(id, CancellationToken.None);
    }

    /// <summary>Get the type of link and the products linked</summary>
    /// <param name="id">The id of the link</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<ProductLinkDetailsModel> GetProductLinkAsync(int id, CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/products/links/{id}");
        urlBuilder_.Replace("{id}", Uri.EscapeDataString(Convert.ToString(id, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ = default(ProductLinkDetailsModel);
                        try
                        {
                            result_ =
                                Newtonsoft.Json.JsonConvert.DeserializeObject<ProductLinkDetailsModel>(
                                    responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(ProductLinkDetailsModel);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Edit an existing product link</summary>
    /// <param name="id">The id of the link</param>
    /// <param name="body">The details of the link</param>
    /// <returns>Successful operation</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<ProductLinkDetailsModel> PutProductLinkAsync(int id, ProductLinkDetailsForm body)
    {
        return this.PutProductLinkAsync(id, body, CancellationToken.None);
    }

    /// <summary>Edit an existing product link</summary>
    /// <param name="id">The id of the link</param>
    /// <param name="body">The details of the link</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<ProductLinkDetailsModel> PutProductLinkAsync(
        int id,
        ProductLinkDetailsForm body,
        CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/products/links/{id}");
        urlBuilder_.Replace("{id}", Uri.EscapeDataString(Convert.ToString(id, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body));
                content_.Headers.ContentType.MediaType = "application/json";
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("PUT");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ = default(ProductLinkDetailsModel);
                        try
                        {
                            result_ =
                                Newtonsoft.Json.JsonConvert.DeserializeObject<ProductLinkDetailsModel>(
                                    responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ == "400")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "Product conflicts with another link group",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(ProductLinkDetailsModel);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Delete a product link</summary>
    /// <param name="id">The id of the link</param>
    /// <returns>Successful operation</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task DeleteProductLinkAsync(int id)
    {
        return this.DeleteProductLinkAsync(id, CancellationToken.None);
    }

    /// <summary>Delete a product link</summary>
    /// <param name="id">The id of the link</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task DeleteProductLinkAsync(int id, CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/products/links/{id}");
        urlBuilder_.Replace("{id}", Uri.EscapeDataString(Convert.ToString(id, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("DELETE");

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "204")
                    {
                        return;
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Find product by code</summary>
    /// <param name="libraryCode">The library code for the product to return</param>
    /// <param name="productCode">The product code for the product to return</param>
    /// <param name="includeExtendedMetadata">Whether to include extended metadata, categories, authors, product links and buy it now link in the result</param>
    /// <param name="includeToc">Whether to include the table of contents of the product (will display appropriately for the current user)</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<ProductMetadataModel> GetProductByCodeAsync(
        string libraryCode,
        string productCode,
        bool? includeExtendedMetadata,
        bool? includeToc)
    {
        return this.GetProductByCodeAsync(
            libraryCode,
            productCode,
            includeExtendedMetadata,
            includeToc,
            CancellationToken.None);
    }

    /// <summary>Find product by code</summary>
    /// <param name="libraryCode">The library code for the product to return</param>
    /// <param name="productCode">The product code for the product to return</param>
    /// <param name="includeExtendedMetadata">Whether to include extended metadata, categories, authors, product links and buy it now link in the result</param>
    /// <param name="includeToc">Whether to include the table of contents of the product (will display appropriately for the current user)</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<ProductMetadataModel> GetProductByCodeAsync(
        string libraryCode,
        string productCode,
        bool? includeExtendedMetadata,
        bool? includeToc,
        CancellationToken cancellationToken)
    {
        if (libraryCode == null)
            throw new System.ArgumentNullException("libraryCode");

        if (productCode == null)
            throw new System.ArgumentNullException("productCode");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/libraries/{LibraryCode}/products/{ProductCode}?");
        urlBuilder_.Replace(
            "{LibraryCode}",
            Uri.EscapeDataString(Convert.ToString(libraryCode, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace(
            "{ProductCode}",
            Uri.EscapeDataString(Convert.ToString(productCode, CultureInfo.InvariantCulture)));
        if (includeExtendedMetadata != null)
            urlBuilder_.Append("IncludeExtendedMetadata=")
                        .Append(
                            Uri.EscapeDataString(
                                Convert.ToString(includeExtendedMetadata.Value, CultureInfo.InvariantCulture)))
                        .Append("&");
        if (includeToc != null)
            urlBuilder_.Append("IncludeToc=").Append(
                            Uri.EscapeDataString(Convert.ToString(includeToc.Value, CultureInfo.InvariantCulture)))
                        .Append("&");
        urlBuilder_.Length--;

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ = default(ProductMetadataModel);
                        try
                        {
                            result_ =
                                Newtonsoft.Json.JsonConvert.DeserializeObject<ProductMetadataModel>(responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ == "401")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The current user does not have a license to this product.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The product was not found.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(ProductMetadataModel);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Add or update a product</summary>
    /// <param name="libraryCode">The library code for the product to update</param>
    /// <param name="productCode">The product code for the product to update</param>
    /// <param name="body">Metadata to update the product with</param>
    /// <returns>Product successfully created.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<ProductMetadataModel> PutProductAsync(
        string libraryCode,
        string productCode,
        ProductMetadataForm body)
    {
        return this.PutProductAsync(libraryCode, productCode, body, CancellationToken.None);
    }

    /// <summary>Add or update a product</summary>
    /// <param name="libraryCode">The library code for the product to update</param>
    /// <param name="productCode">The product code for the product to update</param>
    /// <param name="body">Metadata to update the product with</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Product successfully created.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<ProductMetadataModel> PutProductAsync(
        string libraryCode,
        string productCode,
        ProductMetadataForm body,
        CancellationToken cancellationToken)
    {
        if (libraryCode == null)
            throw new System.ArgumentNullException("libraryCode");

        if (productCode == null)
            throw new System.ArgumentNullException("productCode");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/libraries/{LibraryCode}/products/{ProductCode}");
        urlBuilder_.Replace(
            "{LibraryCode}",
            Uri.EscapeDataString(Convert.ToString(libraryCode, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace(
            "{ProductCode}",
            Uri.EscapeDataString(Convert.ToString(productCode, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body));
                content_.Headers.ContentType.MediaType = "application/json";
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("PUT");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "201")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ = default(ProductMetadataModel);
                        try
                        {
                            result_ =
                                Newtonsoft.Json.JsonConvert.DeserializeObject<ProductMetadataModel>(responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ == "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "Product successfully updated.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ == "400")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The request contains invalid fields.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ == "409")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The product already exists and the \"CreateOnly\" parameter is true.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(ProductMetadataModel);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Delete a product, if it exists</summary>
    /// <param name="libraryCode">The library code for the product to delete</param>
    /// <param name="productCode">The product code for the product to delete</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task DeleteProductAsync(string libraryCode, string productCode)
    {
        return this.DeleteProductAsync(libraryCode, productCode, CancellationToken.None);
    }

    /// <summary>Delete a product, if it exists</summary>
    /// <param name="libraryCode">The library code for the product to delete</param>
    /// <param name="productCode">The product code for the product to delete</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task DeleteProductAsync(string libraryCode, string productCode, CancellationToken cancellationToken)
    {
        if (libraryCode == null)
            throw new System.ArgumentNullException("libraryCode");

        if (productCode == null)
            throw new System.ArgumentNullException("productCode");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/libraries/{LibraryCode}/products/{ProductCode}");
        urlBuilder_.Replace(
            "{LibraryCode}",
            Uri.EscapeDataString(Convert.ToString(libraryCode, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace(
            "{ProductCode}",
            Uri.EscapeDataString(Convert.ToString(productCode, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("DELETE");

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "204")
                    {
                        return;
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The product with the given code does not exist. \n\nNote: this could mean that it used to exist but has previously been deleted.\n",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Get a generated print copy of specified format</summary>
    /// <param name="libraryCode">The library code for the product to return</param>
    /// <param name="productCode">The product code for the product to return</param>
    /// <param name="extension">A file extension to look for (by default doc, pdf, xls and ppt are supported)</param>
    /// <param name="fileCode">The code of the file desired</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<FileDownloadModel> GetPrintCopyAsync(
        string libraryCode,
        string productCode,
        string extension,
        string fileCode)
    {
        return this.GetPrintCopyAsync(libraryCode, productCode, extension, fileCode, CancellationToken.None);
    }

    /// <summary>Get a generated print copy of specified format</summary>
    /// <param name="libraryCode">The library code for the product to return</param>
    /// <param name="productCode">The product code for the product to return</param>
    /// <param name="extension">A file extension to look for (by default doc, pdf, xls and ppt are supported)</param>
    /// <param name="fileCode">The code of the file desired</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<FileDownloadModel> GetPrintCopyAsync(
        string libraryCode,
        string productCode,
        string extension,
        string fileCode,
        CancellationToken cancellationToken)
    {
        if (libraryCode == null)
            throw new System.ArgumentNullException("libraryCode");

        if (productCode == null)
            throw new System.ArgumentNullException("productCode");

        if (extension == null)
            throw new System.ArgumentNullException("extension");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append(
            "/libraries/{libraryCode}/products/{productCode}/printcopies/{extension}?");
        urlBuilder_.Replace(
            "{LibraryCode}",
            Uri.EscapeDataString(Convert.ToString(libraryCode, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace(
            "{ProductCode}",
            Uri.EscapeDataString(Convert.ToString(productCode, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace(
            "{extension}",
            Uri.EscapeDataString(Convert.ToString(extension, CultureInfo.InvariantCulture)));
        if (fileCode != null)
            urlBuilder_.Append("fileCode=").Append(
                            Uri.EscapeDataString(Convert.ToString(fileCode, CultureInfo.InvariantCulture)))
                        .Append("&");
        urlBuilder_.Length--;

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ = default(FileDownloadModel);
                        try
                        {
                            result_ =
                                Newtonsoft.Json.JsonConvert.DeserializeObject<FileDownloadModel>(responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ == "401")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "User does not have a license to content",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "Could not find the product or print copy",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(FileDownloadModel);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Get an attachment file</summary>
    /// <param name="libraryCode">The library code for the product to return</param>
    /// <param name="productCode">The product code for the product to return</param>
    /// <param name="fileCode">The code of the file desired</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<FileDownloadModel> GetAttachmentAsync(string libraryCode, string productCode, string fileCode)
    {
        return this.GetAttachmentAsync(libraryCode, productCode, fileCode, CancellationToken.None);
    }

    /// <summary>Get an attachment file</summary>
    /// <param name="libraryCode">The library code for the product to return</param>
    /// <param name="productCode">The product code for the product to return</param>
    /// <param name="fileCode">The code of the file desired</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<FileDownloadModel> GetAttachmentAsync(
        string libraryCode,
        string productCode,
        string fileCode,
        CancellationToken cancellationToken)
    {
        if (libraryCode == null)
            throw new System.ArgumentNullException("libraryCode");

        if (productCode == null)
            throw new System.ArgumentNullException("productCode");

        if (fileCode == null)
            throw new System.ArgumentNullException("fileCode");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl)
                    .Append("/libraries/{libraryCode}/products/{productCode}/attachments/{fileCode}");
        urlBuilder_.Replace(
            "{libraryCode}",
            Uri.EscapeDataString(Convert.ToString(libraryCode, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace(
            "{productCode}",
            Uri.EscapeDataString(Convert.ToString(productCode, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace(
            "{fileCode}",
            Uri.EscapeDataString(Convert.ToString(fileCode, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ = default(FileDownloadModel);
                        try
                        {
                            result_ =
                                Newtonsoft.Json.JsonConvert.DeserializeObject<FileDownloadModel>(responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ == "401")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "User does not have a license to content",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "Could not find the product or attachment",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(FileDownloadModel);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Get a main deliverable file from a product</summary>
    /// <param name="libraryCode">The library code for the product to return</param>
    /// <param name="productCode">The product code for the product to return</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<ProductContentModel> GetContentAsync(string libraryCode, string productCode)
    {
        return this.GetContentAsync(libraryCode, productCode, CancellationToken.None);
    }

    /// <summary>Get a main deliverable file from a product</summary>
    /// <param name="libraryCode">The library code for the product to return</param>
    /// <param name="productCode">The product code for the product to return</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<ProductContentModel> GetContentAsync(
        string libraryCode,
        string productCode,
        CancellationToken cancellationToken)
    {
        if (libraryCode == null)
            throw new System.ArgumentNullException("libraryCode");

        if (productCode == null)
            throw new System.ArgumentNullException("productCode");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/libraries/{libraryCode}/products/{productCode}/content");
        urlBuilder_.Replace(
            "{libraryCode}",
            Uri.EscapeDataString(Convert.ToString(libraryCode, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace(
            "{productCode}",
            Uri.EscapeDataString(Convert.ToString(productCode, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ = default(ProductContentModel);
                        try
                        {
                            result_ =
                                Newtonsoft.Json.JsonConvert.DeserializeObject<ProductContentModel>(responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ == "401")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "User does not have a license to content",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "Could not find the product or main deliverable",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(ProductContentModel);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Get the extended metadata for a product</summary>
    /// <param name="libraryCode">The library code for the product to return</param>
    /// <param name="productCode">The product code for the product to return</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<ProductExtendedMetadataModel> GetExtendedMetadataAsync(string libraryCode, string productCode)
    {
        return this.GetExtendedMetadataAsync(libraryCode, productCode, CancellationToken.None);
    }

    /// <summary>Get the extended metadata for a product</summary>
    /// <param name="libraryCode">The library code for the product to return</param>
    /// <param name="productCode">The product code for the product to return</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<ProductExtendedMetadataModel> GetExtendedMetadataAsync(
        string libraryCode,
        string productCode,
        CancellationToken cancellationToken)
    {
        if (libraryCode == null)
            throw new System.ArgumentNullException("libraryCode");

        if (productCode == null)
            throw new System.ArgumentNullException("productCode");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/libraries/{LibraryCode}/products/{ProductCode}/metadata");
        urlBuilder_.Replace(
            "{LibraryCode}",
            Uri.EscapeDataString(Convert.ToString(libraryCode, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace(
            "{ProductCode}",
            Uri.EscapeDataString(Convert.ToString(productCode, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ = default(ProductExtendedMetadataModel);
                        try
                        {
                            result_ =
                                Newtonsoft.Json.JsonConvert.DeserializeObject<ProductExtendedMetadataModel>(
                                    responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ == "401")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The current user does not have a license to this product.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The product was not found.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(ProductExtendedMetadataModel);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Update the extended metadata for a product</summary>
    /// <param name="libraryCode">The library code for the product to update</param>
    /// <param name="productCode">The product code for the product to update</param>
    /// <param name="body">Metadata to update the product with</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task PutExtendedMetadataAsync(string libraryCode, string productCode, ProductExtendedMetadataForm body)
    {
        return this.PutExtendedMetadataAsync(libraryCode, productCode, body, CancellationToken.None);
    }

    /// <summary>Update the extended metadata for a product</summary>
    /// <param name="libraryCode">The library code for the product to update</param>
    /// <param name="productCode">The product code for the product to update</param>
    /// <param name="body">Metadata to update the product with</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task PutExtendedMetadataAsync(
        string libraryCode,
        string productCode,
        ProductExtendedMetadataForm body,
        CancellationToken cancellationToken)
    {
        if (libraryCode == null)
            throw new System.ArgumentNullException("libraryCode");

        if (productCode == null)
            throw new System.ArgumentNullException("productCode");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/libraries/{LibraryCode}/products/{ProductCode}/metadata");
        urlBuilder_.Replace(
            "{LibraryCode}",
            Uri.EscapeDataString(Convert.ToString(libraryCode, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace(
            "{ProductCode}",
            Uri.EscapeDataString(Convert.ToString(productCode, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body));
                content_.Headers.ContentType.MediaType = "application/json";
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("PUT");

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "204")
                    {
                        return;
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The product was not found.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Update the extended metadata for a product</summary>
    /// <param name="libraryCode">The library code for the product to update</param>
    /// <param name="productCode">The product code for the product to update</param>
    /// <param name="body">Commands to update the extended metadata</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task PatchExtendedMetadataAsync(
        string libraryCode,
        string productCode,
        System.Collections.Generic.IEnumerable<ProductExtendedMetadataCommand> body)
    {
        return this.PatchExtendedMetadataAsync(libraryCode, productCode, body, CancellationToken.None);
    }

    /// <summary>Update the extended metadata for a product</summary>
    /// <param name="libraryCode">The library code for the product to update</param>
    /// <param name="productCode">The product code for the product to update</param>
    /// <param name="body">Commands to update the extended metadata</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task PatchExtendedMetadataAsync(
        string libraryCode,
        string productCode,
        System.Collections.Generic.IEnumerable<ProductExtendedMetadataCommand> body,
        CancellationToken cancellationToken)
    {
        if (libraryCode == null)
            throw new System.ArgumentNullException("libraryCode");

        if (productCode == null)
            throw new System.ArgumentNullException("productCode");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/libraries/{LibraryCode}/products/{ProductCode}/metadata");
        urlBuilder_.Replace(
            "{LibraryCode}",
            Uri.EscapeDataString(Convert.ToString(libraryCode, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace(
            "{ProductCode}",
            Uri.EscapeDataString(Convert.ToString(productCode, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body));
                content_.Headers.ContentType.MediaType = "application/json";
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("PATCH");

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "204")
                    {
                        return;
                    }
                    else if (status_ == "400")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The request contains invalid fields.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The product was not found.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Get the source files of the product.</summary>
    /// <param name="libraryCode">The library code for the product</param>
    /// <param name="productCode">The product code for the product to return</param>
    /// <param name="includeCategoryMetadata">Whether to include categories in the metadata</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<string> GetSourceFilesAsync(string libraryCode, string productCode, bool? includeCategoryMetadata)
    {
        return this.GetSourceFilesAsync(libraryCode, productCode, includeCategoryMetadata, CancellationToken.None);
    }

    /// <summary>Get the source files of the product.</summary>
    /// <param name="libraryCode">The library code for the product</param>
    /// <param name="productCode">The product code for the product to return</param>
    /// <param name="includeCategoryMetadata">Whether to include categories in the metadata</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<string> GetSourceFilesAsync(
        string libraryCode,
        string productCode,
        bool? includeCategoryMetadata,
        CancellationToken cancellationToken)
    {
        if (libraryCode == null)
            throw new System.ArgumentNullException("libraryCode");

        if (productCode == null)
            throw new System.ArgumentNullException("productCode");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/libraries/{LibraryCode}/products/{ProductCode}/source?");
        urlBuilder_.Replace(
            "{LibraryCode}",
            Uri.EscapeDataString(Convert.ToString(libraryCode, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace(
            "{ProductCode}",
            Uri.EscapeDataString(Convert.ToString(productCode, CultureInfo.InvariantCulture)));
        if (includeCategoryMetadata != null)
            urlBuilder_.Append("includeCategoryMetadata=")
                        .Append(
                            Uri.EscapeDataString(
                                Convert.ToString(includeCategoryMetadata.Value, CultureInfo.InvariantCulture)))
                        .Append("&");
        urlBuilder_.Length--;

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ = default(string);
                        try
                        {
                            result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<string>(responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ == "401")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The current user does not have a license to this product.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The product was not found.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(string);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Get the categories a product is in</summary>
    /// <param name="libraryCode">The library code for the product to return</param>
    /// <param name="productCode">The product code for the product to return</param>
    /// <param name="includeHidden">Whether to include hidden categories or not. Only available for users in role "ReportAdmin".</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<System.Collections.ObjectModel.ObservableCollection<string>> GetProductCategoriesAsync(
        string libraryCode,
        string productCode,
        bool? includeHidden)
    {
        return this.GetProductCategoriesAsync(libraryCode, productCode, includeHidden, CancellationToken.None);
    }

    /// <summary>Get the categories a product is in</summary>
    /// <param name="libraryCode">The library code for the product to return</param>
    /// <param name="productCode">The product code for the product to return</param>
    /// <param name="includeHidden">Whether to include hidden categories or not. Only available for users in role "ReportAdmin".</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<System.Collections.ObjectModel.ObservableCollection<string>> GetProductCategoriesAsync(
        string libraryCode,
        string productCode,
        bool? includeHidden,
        CancellationToken cancellationToken)
    {
        if (libraryCode == null)
            throw new System.ArgumentNullException("libraryCode");

        if (productCode == null)
            throw new System.ArgumentNullException("productCode");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/libraries/{LibraryCode}/products/{ProductCode}/categories?");
        urlBuilder_.Replace(
            "{LibraryCode}",
            Uri.EscapeDataString(Convert.ToString(libraryCode, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace(
            "{ProductCode}",
            Uri.EscapeDataString(Convert.ToString(productCode, CultureInfo.InvariantCulture)));
        if (includeHidden != null)
            urlBuilder_.Append("includeHidden=").Append(
                Uri.EscapeDataString(
                    Convert.ToString(includeHidden.Value, CultureInfo.InvariantCulture))).Append("&");
        urlBuilder_.Length--;

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ = default(System.Collections.ObjectModel.ObservableCollection<string>);
                        try
                        {
                            result_ = Newtonsoft
                                .Json.JsonConvert
                                .DeserializeObject<System.Collections.ObjectModel.ObservableCollection<string>>(
                                    responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ == "401")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The current user does not have a license to this product.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The product was not found.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(System.Collections.ObjectModel.ObservableCollection<string>);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Update the categories a product is in</summary>
    /// <param name="libraryCode">The library code for the product to update</param>
    /// <param name="productCode">The product code for the product to update</param>
    /// <param name="body">The new categories the product should be in</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task PutProductCategoriesAsync(
        string libraryCode,
        string productCode,
        System.Collections.Generic.IEnumerable<string> body)
    {
        return this.PutProductCategoriesAsync(libraryCode, productCode, body, CancellationToken.None);
    }

    /// <summary>Update the categories a product is in</summary>
    /// <param name="libraryCode">The library code for the product to update</param>
    /// <param name="productCode">The product code for the product to update</param>
    /// <param name="body">The new categories the product should be in</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task PutProductCategoriesAsync(
        string libraryCode,
        string productCode,
        System.Collections.Generic.IEnumerable<string> body,
        CancellationToken cancellationToken)
    {
        if (libraryCode == null)
            throw new System.ArgumentNullException("libraryCode");

        if (productCode == null)
            throw new System.ArgumentNullException("productCode");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/libraries/{LibraryCode}/products/{ProductCode}/categories");
        urlBuilder_.Replace(
            "{LibraryCode}",
            Uri.EscapeDataString(Convert.ToString(libraryCode, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace(
            "{ProductCode}",
            Uri.EscapeDataString(Convert.ToString(productCode, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body));
                content_.Headers.ContentType.MediaType = "application/json";
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("PUT");

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        return;
                    }
                    else if (status_ == "401")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The current user does not have a license to this product.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The product was not found.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Gets the top level categories, optionally including children</summary>
    /// <param name="includeHidden">Whether to include hidden categories or not. Only available for users in role "ReportAdmin".</param>
    /// <param name="includeDescendants">Whether to include descendants of the categories.
    /// 
    /// Warning: this can be a large amount of data and therefore slow. It is recommended to look up a specific category by id</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<System.Collections.ObjectModel.ObservableCollection<CategoryModel>> GetCategoriesAsync(
        bool? includeHidden,
        bool? includeDescendants)
    {
        return this.GetCategoriesAsync(includeHidden, includeDescendants, CancellationToken.None);
    }

    /// <summary>Gets the top level categories, optionally including children</summary>
    /// <param name="includeHidden">Whether to include hidden categories or not. Only available for users in role "ReportAdmin".</param>
    /// <param name="includeDescendants">Whether to include descendants of the categories.
    /// 
    /// Warning: this can be a large amount of data and therefore slow. It is recommended to look up a specific category by id</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<System.Collections.ObjectModel.ObservableCollection<CategoryModel>> GetCategoriesAsync(
        bool? includeHidden,
        bool? includeDescendants,
        CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/categories?");
        if (includeHidden != null)
            urlBuilder_.Append("includeHidden=").Append(
                Uri.EscapeDataString(
                    Convert.ToString(includeHidden.Value, CultureInfo.InvariantCulture))).Append("&");
        if (includeDescendants != null)
            urlBuilder_.Append("includeDescendants=")
                        .Append(
                            Uri.EscapeDataString(
                                Convert.ToString(includeDescendants.Value, CultureInfo.InvariantCulture)))
                        .Append("&");
        urlBuilder_.Length--;

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ = default(System.Collections.ObjectModel.ObservableCollection<CategoryModel>);
                        try
                        {
                            result_ = Newtonsoft
                                .Json.JsonConvert
                                .DeserializeObject<System.Collections.ObjectModel.ObservableCollection<
                                    CategoryModel>>(responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(System.Collections.ObjectModel.ObservableCollection<CategoryModel>);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Adds a category</summary>
    /// <param name="body">The details of the category to add</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<CreatedCategoryModel> PostCategoryAsync(CategoryDataForm body)
    {
        return this.PostCategoryAsync(body, CancellationToken.None);
    }

    /// <summary>Adds a category</summary>
    /// <param name="body">The details of the category to add</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<CreatedCategoryModel> PostCategoryAsync(
        CategoryDataForm body,
        CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/categories");

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body));
                content_.Headers.ContentType.MediaType = "application/json";
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("POST");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ = default(CreatedCategoryModel);
                        try
                        {
                            result_ =
                                Newtonsoft.Json.JsonConvert.DeserializeObject<CreatedCategoryModel>(responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ == "400")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The specified parent does not exist",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ == "409")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The specified code was not unique",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(CreatedCategoryModel);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Get a specific category</summary>
    /// <param name="id">The id of the category to retrieve</param>
    /// <param name="includeHidden">Whether to include hidden categories or not. Only available for users in role "ReportAdmin".</param>
    /// <param name="includeDescendants">Whether to include descendants of the category.</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<CategoryModel> GetCategoryAsync(string id, bool? includeHidden, bool? includeDescendants)
    {
        return this.GetCategoryAsync(id, includeHidden, includeDescendants, CancellationToken.None);
    }

    /// <summary>Get a specific category</summary>
    /// <param name="id">The id of the category to retrieve</param>
    /// <param name="includeHidden">Whether to include hidden categories or not. Only available for users in role "ReportAdmin".</param>
    /// <param name="includeDescendants">Whether to include descendants of the category.</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<CategoryModel> GetCategoryAsync(
        string id,
        bool? includeHidden,
        bool? includeDescendants,
        CancellationToken cancellationToken)
    {
        if (id == null)
            throw new System.ArgumentNullException("id");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/categories/{id}?");
        urlBuilder_.Replace("{id}", Uri.EscapeDataString(Convert.ToString(id, CultureInfo.InvariantCulture)));
        if (includeHidden != null)
            urlBuilder_.Append("includeHidden=").Append(
                Uri.EscapeDataString(
                    Convert.ToString(includeHidden.Value, CultureInfo.InvariantCulture))).Append("&");
        if (includeDescendants != null)
            urlBuilder_.Append("includeDescendants=")
                        .Append(
                            Uri.EscapeDataString(
                                Convert.ToString(includeDescendants.Value, CultureInfo.InvariantCulture)))
                        .Append("&");
        urlBuilder_.Length--;

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ = default(CategoryModel);
                        try
                        {
                            result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CategoryModel>(responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The category was not found, possibly because it is hidden",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(CategoryModel);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Updates a category</summary>
    /// <param name="id">The id of the category to update</param>
    /// <param name="body">The details to update the category with</param>
    /// <returns>Successful operation</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task PutCategoryAsync(string id, CategoryDataForm body)
    {
        return this.PutCategoryAsync(id, body, CancellationToken.None);
    }

    /// <summary>Updates a category</summary>
    /// <param name="id">The id of the category to update</param>
    /// <param name="body">The details to update the category with</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task PutCategoryAsync(string id, CategoryDataForm body, CancellationToken cancellationToken)
    {
        if (id == null)
            throw new System.ArgumentNullException("id");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/categories/{id}");
        urlBuilder_.Replace("{id}", Uri.EscapeDataString(Convert.ToString(id, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body));
                content_.Headers.ContentType.MediaType = "application/json";
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("PUT");

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        return;
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The category was not found",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ == "400")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The parentId was set to either this category, sub-category or it doesn\'t exist",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ == "409")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The specified code was not unique",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Deletes a category</summary>
    /// <param name="id">The id of the category to delete</param>
    /// <returns>Successful operation</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task DeleteCategoryAsync(string id)
    {
        return this.DeleteCategoryAsync(id, CancellationToken.None);
    }

    /// <summary>Deletes a category</summary>
    /// <param name="id">The id of the category to delete</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task DeleteCategoryAsync(string id, CancellationToken cancellationToken)
    {
        if (id == null)
            throw new System.ArgumentNullException("id");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/categories/{id}");
        urlBuilder_.Replace("{id}", Uri.EscapeDataString(Convert.ToString(id, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("DELETE");

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "204")
                    {
                        return;
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The category was not found",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ == "400")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The category contains sub-categories, please delete these first",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Get the products in a specific category</summary>
    /// <param name="id">The id of the category</param>
    /// <param name="includeDescendants">If true then all products which are in decendant categories will be added to the list created</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<System.Collections.ObjectModel.ObservableCollection<ProductRevisionIdModel>> GetProductsInCategoryAsync(
        string id,
        bool? includeDescendants)
    {
        return this.GetProductsInCategoryAsync(id, includeDescendants, CancellationToken.None);
    }

    /// <summary>Get the products in a specific category</summary>
    /// <param name="id">The id of the category</param>
    /// <param name="includeDescendants">If true then all products which are in decendant categories will be added to the list created</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<System.Collections.ObjectModel.ObservableCollection<ProductRevisionIdModel>> GetProductsInCategoryAsync(
        string id,
        bool? includeDescendants,
        CancellationToken cancellationToken)
    {
        if (id == null)
            throw new System.ArgumentNullException("id");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/categories/{id}/products?");
        urlBuilder_.Replace("{id}", Uri.EscapeDataString(Convert.ToString(id, CultureInfo.InvariantCulture)));
        if (includeDescendants != null)
            urlBuilder_.Append("includeDescendants=")
                        .Append(
                            Uri.EscapeDataString(
                                Convert.ToString(includeDescendants.Value, CultureInfo.InvariantCulture)))
                        .Append("&");
        urlBuilder_.Length--;

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ =
                            default(System.Collections.ObjectModel.ObservableCollection<ProductRevisionIdModel>);
                        try
                        {
                            result_ = Newtonsoft
                                .Json.JsonConvert
                                .DeserializeObject<System.Collections.ObjectModel.ObservableCollection<
                                    ProductRevisionIdModel>>(responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The category was not found",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(System.Collections.ObjectModel.ObservableCollection<ProductRevisionIdModel>);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Get the authors of a product</summary>
    /// <param name="libraryCode">The library code for the product to return</param>
    /// <param name="productCode">The product code for the product to return</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<System.Collections.ObjectModel.ObservableCollection<ProductAuthorForm>> GetAllProductAuthorsAsync(
        string libraryCode,
        string productCode)
    {
        return this.GetAllProductAuthorsAsync(libraryCode, productCode, CancellationToken.None);
    }

    /// <summary>Get the authors of a product</summary>
    /// <param name="libraryCode">The library code for the product to return</param>
    /// <param name="productCode">The product code for the product to return</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<System.Collections.ObjectModel.ObservableCollection<ProductAuthorForm>> GetAllProductAuthorsAsync(
        string libraryCode,
        string productCode,
        CancellationToken cancellationToken)
    {
        if (libraryCode == null)
            throw new System.ArgumentNullException("libraryCode");

        if (productCode == null)
            throw new System.ArgumentNullException("productCode");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/libraries/{LibraryCode}/products/{ProductCode}/authors");
        urlBuilder_.Replace(
            "{LibraryCode}",
            Uri.EscapeDataString(Convert.ToString(libraryCode, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace(
            "{ProductCode}",
            Uri.EscapeDataString(Convert.ToString(productCode, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ =
                            default(System.Collections.ObjectModel.ObservableCollection<ProductAuthorForm>);
                        try
                        {
                            result_ = Newtonsoft
                                .Json.JsonConvert
                                .DeserializeObject<System.Collections.ObjectModel.ObservableCollection<
                                    ProductAuthorForm>>(responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ == "401")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The current user does not have a license to this product.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ == "403")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The feature is not available.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The product was not found.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(System.Collections.ObjectModel.ObservableCollection<ProductAuthorForm>);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Update the authors of a product</summary>
    /// <param name="libraryCode">The library code for the product to update</param>
    /// <param name="productCode">The product code for the product to update</param>
    /// <param name="body"></param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task PutProductAuthorsAsync(
        string libraryCode,
        string productCode,
        System.Collections.Generic.IEnumerable<ProductAuthorForm> body)
    {
        return this.PutProductAuthorsAsync(libraryCode, productCode, body, CancellationToken.None);
    }

    /// <summary>Update the authors of a product</summary>
    /// <param name="libraryCode">The library code for the product to update</param>
    /// <param name="productCode">The product code for the product to update</param>
    /// <param name="body"></param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task PutProductAuthorsAsync(
        string libraryCode,
        string productCode,
        System.Collections.Generic.IEnumerable<ProductAuthorForm> body,
        CancellationToken cancellationToken)
    {
        if (libraryCode == null)
            throw new System.ArgumentNullException("libraryCode");

        if (productCode == null)
            throw new System.ArgumentNullException("productCode");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/libraries/{LibraryCode}/products/{ProductCode}/authors");
        urlBuilder_.Replace(
            "{LibraryCode}",
            Uri.EscapeDataString(Convert.ToString(libraryCode, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace(
            "{ProductCode}",
            Uri.EscapeDataString(Convert.ToString(productCode, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body));
                content_.Headers.ContentType.MediaType = "application/json";
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("PUT");

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "204")
                    {
                        return;
                    }
                    else if (status_ == "401")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The current user does not have a license to this product.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ == "403")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The feature is not available.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The product was not found.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Gets the table of contents for a product</summary>
    /// <param name="libraryCode">The library code for the product to return</param>
    /// <param name="productCode">The product code for the product to return</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<ProductTocModel> GetProductTocAsync(string libraryCode, string productCode)
    {
        return this.GetProductTocAsync(libraryCode, productCode, CancellationToken.None);
    }

    /// <summary>Gets the table of contents for a product</summary>
    /// <param name="libraryCode">The library code for the product to return</param>
    /// <param name="productCode">The product code for the product to return</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<ProductTocModel> GetProductTocAsync(
        string libraryCode,
        string productCode,
        CancellationToken cancellationToken)
    {
        if (libraryCode == null)
            throw new System.ArgumentNullException("libraryCode");

        if (productCode == null)
            throw new System.ArgumentNullException("productCode");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/libraries/{LibraryCode}/products/{ProductCode}/toc");
        urlBuilder_.Replace(
            "{LibraryCode}",
            Uri.EscapeDataString(Convert.ToString(libraryCode, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace(
            "{ProductCode}",
            Uri.EscapeDataString(Convert.ToString(productCode, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ = default(ProductTocModel);
                        try
                        {
                            result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProductTocModel>(responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ == "401")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The current user does not have a license to this product.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The product was not found.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(ProductTocModel);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Gets an index of all text contained within the product</summary>
    /// <param name="libraryCode">The library code for the product to return</param>
    /// <param name="productCode">The product code for the product to return</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<string> GetProductTextIndexAsync(string libraryCode, string productCode)
    {
        return this.GetProductTextIndexAsync(libraryCode, productCode, CancellationToken.None);
    }

    /// <summary>Gets an index of all text contained within the product</summary>
    /// <param name="libraryCode">The library code for the product to return</param>
    /// <param name="productCode">The product code for the product to return</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<string> GetProductTextIndexAsync(
        string libraryCode,
        string productCode,
        CancellationToken cancellationToken)
    {
        if (libraryCode == null)
            throw new System.ArgumentNullException("libraryCode");

        if (productCode == null)
            throw new System.ArgumentNullException("productCode");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/libraries/{LibraryCode}/products/{ProductCode}/indexablecontent");
        urlBuilder_.Replace(
            "{LibraryCode}",
            Uri.EscapeDataString(Convert.ToString(libraryCode, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace(
            "{ProductCode}",
            Uri.EscapeDataString(Convert.ToString(productCode, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ = default(string);
                        try
                        {
                            result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<string>(responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ == "401")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The current user does not have a license to this product.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The product was not found.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(string);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Search for news items in a product</summary>
    /// <param name="libraryCode">The library code for the product containing the news items</param>
    /// <param name="productCode">The product code for the product containing the news items</param>
    /// <param name="publishedAfter">When provided, filters the returned items to only those published after the given date.</param>
    /// <param name="publishedBefore">When provided, filters the returned items to only those published before the given date.</param>
    /// <param name="skip">The zero-based index of the news item to start at. Used for paging</param>
    /// <param name="take">The number of news items to retrieve this request. Used for paging</param>
    /// <param name="sortDirection">The direction to sort news items by published date, and then id.</param>
    /// <param name="category">When provided, filters the returned items to only those which are in the specified news category.</param>
    /// <param name="q">When provided, filters the returned items to only those which match the search term.</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<NewsItemSearchResult> GetProductNewsItemsAsync(
        string libraryCode,
        string productCode,
        System.DateTime? publishedAfter,
        System.DateTime? publishedBefore,
        int? skip,
        int? take,
        SortDirection? sortDirection,
        string category,
        string q)
    {
        return this.GetProductNewsItemsAsync(
            libraryCode,
            productCode,
            publishedAfter,
            publishedBefore,
            skip,
            take,
            sortDirection,
            category,
            q,
            CancellationToken.None);
    }

    /// <summary>Search for news items in a product</summary>
    /// <param name="libraryCode">The library code for the product containing the news items</param>
    /// <param name="productCode">The product code for the product containing the news items</param>
    /// <param name="publishedAfter">When provided, filters the returned items to only those published after the given date.</param>
    /// <param name="publishedBefore">When provided, filters the returned items to only those published before the given date.</param>
    /// <param name="skip">The zero-based index of the news item to start at. Used for paging</param>
    /// <param name="take">The number of news items to retrieve this request. Used for paging</param>
    /// <param name="sortDirection">The direction to sort news items by published date, and then id.</param>
    /// <param name="category">When provided, filters the returned items to only those which are in the specified news category.</param>
    /// <param name="q">When provided, filters the returned items to only those which match the search term.</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<NewsItemSearchResult> GetProductNewsItemsAsync(
        string libraryCode,
        string productCode,
        System.DateTime? publishedAfter,
        System.DateTime? publishedBefore,
        int? skip,
        int? take,
        SortDirection? sortDirection,
        string category,
        string q,
        CancellationToken cancellationToken)
    {
        if (libraryCode == null)
            throw new System.ArgumentNullException("libraryCode");

        if (productCode == null)
            throw new System.ArgumentNullException("productCode");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/libraries/{LibraryCode}/products/{ProductCode}/news-items?");
        urlBuilder_.Replace(
            "{LibraryCode}",
            Uri.EscapeDataString(Convert.ToString(libraryCode, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace(
            "{ProductCode}",
            Uri.EscapeDataString(Convert.ToString(productCode, CultureInfo.InvariantCulture)));
        if (publishedAfter != null)
            urlBuilder_.Append("PublishedAfter=")
                        .Append(
                            Uri.EscapeDataString(publishedAfter.Value.ToString("s", CultureInfo.InvariantCulture)))
                        .Append("&");
        if (publishedBefore != null)
            urlBuilder_.Append("PublishedBefore=")
                        .Append(
                            Uri.EscapeDataString(publishedBefore.Value.ToString("s", CultureInfo.InvariantCulture)))
                        .Append("&");
        if (skip != null)
            urlBuilder_.Append("Skip=").Append(
                            Uri.EscapeDataString(Convert.ToString(skip.Value, CultureInfo.InvariantCulture)))
                        .Append("&");
        if (take != null)
            urlBuilder_.Append("Take=").Append(
                            Uri.EscapeDataString(Convert.ToString(take.Value, CultureInfo.InvariantCulture)))
                        .Append("&");
        if (sortDirection != null)
            urlBuilder_.Append("SortDirection=").Append(
                Uri.EscapeDataString(
                    Convert.ToString(sortDirection.Value, CultureInfo.InvariantCulture))).Append("&");
        if (category != null)
            urlBuilder_.Append("Category=").Append(
                            Uri.EscapeDataString(Convert.ToString(category, CultureInfo.InvariantCulture)))
                        .Append("&");
        if (q != null)
            urlBuilder_.Append("Q=").Append(Uri.EscapeDataString(Convert.ToString(q, CultureInfo.InvariantCulture)))
                        .Append("&");
        urlBuilder_.Length--;

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ = default(NewsItemSearchResult);
                        try
                        {
                            result_ =
                                Newtonsoft.Json.JsonConvert.DeserializeObject<NewsItemSearchResult>(responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ == "400")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The request is invalid",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ == "401")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The current user does not have a license to this product.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The product was not found.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(NewsItemSearchResult);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Gets a specific news item</summary>
    /// <param name="libraryCode">The library code for the product containing the news item</param>
    /// <param name="productCode">The product code for the product containing the news item</param>
    /// <param name="id">The id of the news item to retrieve</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<NewsItemDataModel> GetNewsItemAsync(string libraryCode, string productCode, string id)
    {
        return this.GetNewsItemAsync(libraryCode, productCode, id, CancellationToken.None);
    }

    /// <summary>Gets a specific news item</summary>
    /// <param name="libraryCode">The library code for the product containing the news item</param>
    /// <param name="productCode">The product code for the product containing the news item</param>
    /// <param name="id">The id of the news item to retrieve</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<NewsItemDataModel> GetNewsItemAsync(
        string libraryCode,
        string productCode,
        string id,
        CancellationToken cancellationToken)
    {
        if (libraryCode == null)
            throw new System.ArgumentNullException("libraryCode");

        if (productCode == null)
            throw new System.ArgumentNullException("productCode");

        if (id == null)
            throw new System.ArgumentNullException("id");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/libraries/{LibraryCode}/products/{ProductCode}/news-items/{id}");
        urlBuilder_.Replace(
            "{LibraryCode}",
            Uri.EscapeDataString(Convert.ToString(libraryCode, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace(
            "{ProductCode}",
            Uri.EscapeDataString(Convert.ToString(productCode, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace("{id}", Uri.EscapeDataString(Convert.ToString(id, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ = default(NewsItemDataModel);
                        try
                        {
                            result_ =
                                Newtonsoft.Json.JsonConvert.DeserializeObject<NewsItemDataModel>(responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ == "401")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The current user does not have a license to this product.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The product was not found.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(NewsItemDataModel);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Gets the file types the current subscriber can export</summary>
    /// <returns>Successful operation</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<System.Collections.ObjectModel.ObservableCollection<string>> GetCurrentSubscriberExportPermissionsAsync()
    {
        return this.GetCurrentSubscriberExportPermissionsAsync(CancellationToken.None);
    }

    /// <summary>Gets the file types the current subscriber can export</summary>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<System.Collections.ObjectModel.ObservableCollection<string>> GetCurrentSubscriberExportPermissionsAsync(
        CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/subscriber/exportable-file-extensions");

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ = default(System.Collections.ObjectModel.ObservableCollection<string>);
                        try
                        {
                            result_ = Newtonsoft
                                .Json.JsonConvert
                                .DeserializeObject<System.Collections.ObjectModel.ObservableCollection<string>>(
                                    responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(System.Collections.ObjectModel.ObservableCollection<string>);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Get all the accounts available to the current user.</summary>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<System.Collections.ObjectModel.ObservableCollection<AccountSearchResults>> GetAllAvailableAccountsAsync()
    {
        return this.GetAllAvailableAccountsAsync(CancellationToken.None);
    }

    /// <summary>Get all the accounts available to the current user.</summary>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<System.Collections.ObjectModel.ObservableCollection<AccountSearchResults>> GetAllAvailableAccountsAsync(
        CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/accounts");

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ =
                            default(System.Collections.ObjectModel.ObservableCollection<AccountSearchResults>);
                        try
                        {
                            result_ = Newtonsoft
                                .Json.JsonConvert
                                .DeserializeObject<System.Collections.ObjectModel.ObservableCollection<
                                    AccountSearchResults>>(responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException("Account not found.", status_, responseData_, headers_, null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(System.Collections.ObjectModel.ObservableCollection<AccountSearchResults>);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Resets the password of each enabled, non shared user in the account and then sends a welcome email to each of them</summary>
    /// <param name="body">Account names.</param>
    /// <returns>The emails were successfully sent</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task ResetPasswordsAndSendWelcomeEmailAsync(WelcomeEmailForm body)
    {
        return this.ResetPasswordsAndSendWelcomeEmailAsync(body, CancellationToken.None);
    }

    /// <summary>Resets the password of each enabled, non shared user in the account and then sends a welcome email to each of them</summary>
    /// <param name="body">Account names.</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>The emails were successfully sent</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task ResetPasswordsAndSendWelcomeEmailAsync(WelcomeEmailForm body, CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/accounts/registration/send-welcome-email");

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body));
                content_.Headers.ContentType.MediaType = "application/json";
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("POST");

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        return;
                    }
                    else if (status_ == "400")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "One or more accounts cannot be found or are disabled.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Get an account with a specific name</summary>
    /// <param name="accountName">The name of the account to be retrieved.</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<AccountSearchResults> GetAccountAsync(string accountName)
    {
        return this.GetAccountAsync(accountName, CancellationToken.None);
    }

    /// <summary>Get an account with a specific name</summary>
    /// <param name="accountName">The name of the account to be retrieved.</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<AccountSearchResults> GetAccountAsync(string accountName, CancellationToken cancellationToken)
    {
        if (accountName == null)
            throw new System.ArgumentNullException("accountName");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/accounts/{AccountName}");
        urlBuilder_.Replace(
            "{AccountName}",
            Uri.EscapeDataString(Convert.ToString(accountName, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ = default(AccountSearchResults);
                        try
                        {
                            result_ =
                                Newtonsoft.Json.JsonConvert.DeserializeObject<AccountSearchResults>(responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException("Account not found.", status_, responseData_, headers_, null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(AccountSearchResults);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Create or edit an account</summary>
    /// <param name="accountName">The name of the account to be edited. If the account name is not in use, the account will be created.</param>
    /// <param name="body">Account information.</param>
    /// <returns>The account was successfully edited.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task PutAccountAsync(string accountName, AccountCreateForm body)
    {
        return this.PutAccountAsync(accountName, body, CancellationToken.None);
    }

    /// <summary>Create or edit an account</summary>
    /// <param name="accountName">The name of the account to be edited. If the account name is not in use, the account will be created.</param>
    /// <param name="body">Account information.</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>The account was successfully edited.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task PutAccountAsync(
        string accountName,
        AccountCreateForm body,
        CancellationToken cancellationToken)
    {
        if (accountName == null)
            throw new System.ArgumentNullException("accountName");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/accounts/{AccountName}");
        urlBuilder_.Replace(
            "{AccountName}",
            Uri.EscapeDataString(Convert.ToString(accountName, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body));
                content_.Headers.ContentType.MediaType = "application/json";
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("PUT");

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        return;
                    }
                    else if (status_ == "201")
                    {
                        return;
                    }
                    else if (status_ == "400")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The request contains missing fields.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Delete an account, if it exists</summary>
    /// <param name="accountName">The name of the account to be deleted.</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task DeleteAccountAsync(string accountName)
    {
        return this.DeleteAccountAsync(accountName, CancellationToken.None);
    }

    /// <summary>Delete an account, if it exists</summary>
    /// <param name="accountName">The name of the account to be deleted.</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task DeleteAccountAsync(string accountName, CancellationToken cancellationToken)
    {
        if (accountName == null)
            throw new System.ArgumentNullException("accountName");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/accounts/{AccountName}");
        urlBuilder_.Replace(
            "{AccountName}",
            Uri.EscapeDataString(Convert.ToString(accountName, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("DELETE");

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "204")
                    {
                        return;
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The account with the given name does not exist.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Get registration options for an account.</summary>
    /// <param name="accountName">The name of the account desired.</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<AccountAccessSearchResults> GetRegistrationOptionsAsync(string accountName)
    {
        return this.GetRegistrationOptionsAsync(accountName, CancellationToken.None);
    }

    /// <summary>Get registration options for an account.</summary>
    /// <param name="accountName">The name of the account desired.</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<AccountAccessSearchResults> GetRegistrationOptionsAsync(
        string accountName,
        CancellationToken cancellationToken)
    {
        if (accountName == null)
            throw new System.ArgumentNullException("accountName");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/accounts/{AccountName}/registration");
        urlBuilder_.Replace(
            "{AccountName}",
            Uri.EscapeDataString(Convert.ToString(accountName, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ = default(AccountAccessSearchResults);
                        try
                        {
                            result_ =
                                Newtonsoft.Json.JsonConvert.DeserializeObject<AccountAccessSearchResults>(
                                    responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException("Account not found.", status_, responseData_, headers_, null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(AccountAccessSearchResults);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Set registration options for an account.</summary>
    /// <param name="accountName">The name of the account currently.</param>
    /// <param name="body">Possible values are NoRegistration, AccessCodeOnly, AllowAnyone and GuestUserButNoRegistration.</param>
    /// <returns>The account registration information was successfully edited.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task PutRegistrationOptionsAsync(string accountName, AccountRegistrationCreateForm body)
    {
        return this.PutRegistrationOptionsAsync(accountName, body, CancellationToken.None);
    }

    /// <summary>Set registration options for an account.</summary>
    /// <param name="accountName">The name of the account currently.</param>
    /// <param name="body">Possible values are NoRegistration, AccessCodeOnly, AllowAnyone and GuestUserButNoRegistration.</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>The account registration information was successfully edited.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task PutRegistrationOptionsAsync(
        string accountName,
        AccountRegistrationCreateForm body,
        CancellationToken cancellationToken)
    {
        if (accountName == null)
            throw new System.ArgumentNullException("accountName");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/accounts/{AccountName}/registration");
        urlBuilder_.Replace(
            "{AccountName}",
            Uri.EscapeDataString(Convert.ToString(accountName, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body));
                content_.Headers.ContentType.MediaType = "application/json";
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("PUT");

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        return;
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException("Account not found.", status_, responseData_, headers_, null);
                    }
                    else if (status_ == "400")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The request contains invalid fields.",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Gets the subscriber with the specified username</summary>
    /// <param name="username">The username of the subscriber to retrieve</param>
    /// <returns>Successful operation</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<SubscriberDataModel> GetSubscriberAsync(string username)
    {
        return this.GetSubscriberAsync(username, CancellationToken.None);
    }

    /// <summary>Gets the subscriber with the specified username</summary>
    /// <param name="username">The username of the subscriber to retrieve</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<SubscriberDataModel> GetSubscriberAsync(string username, CancellationToken cancellationToken)
    {
        if (username == null)
            throw new System.ArgumentNullException("username");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/subscribers/{username}");
        urlBuilder_.Replace(
            "{username}",
            Uri.EscapeDataString(Convert.ToString(username, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ = default(SubscriberDataModel);
                        try
                        {
                            result_ =
                                Newtonsoft.Json.JsonConvert.DeserializeObject<SubscriberDataModel>(responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "Subscriber was not found",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(SubscriberDataModel);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Gets all the subscribers in the account with the specified name</summary>
    /// <param name="accountName">The name of the account to retrieve the subscribers from</param>
    /// <returns>Successful operation</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<SubscriberDataModel> GetSubscribersAsync(string accountName)
    {
        return this.GetSubscribersAsync(accountName, CancellationToken.None);
    }

    /// <summary>Gets all the subscribers in the account with the specified name</summary>
    /// <param name="accountName">The name of the account to retrieve the subscribers from</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<SubscriberDataModel> GetSubscribersAsync(
        string accountName,
        CancellationToken cancellationToken)
    {
        if (accountName == null)
            throw new System.ArgumentNullException("accountName");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/accounts/{accountName}/subscribers");
        urlBuilder_.Replace(
            "{accountName}",
            Uri.EscapeDataString(Convert.ToString(accountName, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ = default(SubscriberDataModel);
                        try
                        {
                            result_ =
                                Newtonsoft.Json.JsonConvert.DeserializeObject<SubscriberDataModel>(responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException("Account was not found", status_, responseData_, headers_, null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(SubscriberDataModel);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Creates or updates the subscriber with the specified username</summary>
    /// <param name="accountName">The name of the account the subscriber to edit or create is in</param>
    /// <param name="username">The username of the subscriber to edit or create</param>
    /// <param name="body">Information to update the existing subscriber with or add to a new subscriber (a valid and unique email must be provided)</param>
    /// <returns>Subscriber was edited successfully</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task PutSubscriberAsync(string accountName, string username, SubscriberDataForm body)
    {
        return this.PutSubscriberAsync(accountName, username, body, CancellationToken.None);
    }

    /// <summary>Creates or updates the subscriber with the specified username</summary>
    /// <param name="accountName">The name of the account the subscriber to edit or create is in</param>
    /// <param name="username">The username of the subscriber to edit or create</param>
    /// <param name="body">Information to update the existing subscriber with or add to a new subscriber (a valid and unique email must be provided)</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Subscriber was edited successfully</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task PutSubscriberAsync(
        string accountName,
        string username,
        SubscriberDataForm body,
        CancellationToken cancellationToken)
    {
        if (accountName == null)
            throw new System.ArgumentNullException("accountName");

        if (username == null)
            throw new System.ArgumentNullException("username");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/accounts/{accountName}/subscribers/{username}");
        urlBuilder_.Replace(
            "{accountName}",
            Uri.EscapeDataString(Convert.ToString(accountName, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace(
            "{username}",
            Uri.EscapeDataString(Convert.ToString(username, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body));
                content_.Headers.ContentType.MediaType = "application/json";
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("PUT");

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        return;
                    }
                    else if (status_ == "201")
                    {
                        return;
                    }
                    else if (status_ == "400")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The request contains missing or invalid fields",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException("Account was not found", status_, responseData_, headers_, null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Deletes the subscriber with the specified username</summary>
    /// <param name="accountName">The name of the account the subscriber to delete is in</param>
    /// <param name="username">The username of the subscriber to delete</param>
    /// <returns>Subscriber was deleted successfully</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task DeleteSubscriberAsync(string accountName, string username)
    {
        return this.DeleteSubscriberAsync(accountName, username, CancellationToken.None);
    }

    /// <summary>Deletes the subscriber with the specified username</summary>
    /// <param name="accountName">The name of the account the subscriber to delete is in</param>
    /// <param name="username">The username of the subscriber to delete</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Subscriber was deleted successfully</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task DeleteSubscriberAsync(string accountName, string username, CancellationToken cancellationToken)
    {
        if (accountName == null)
            throw new System.ArgumentNullException("accountName");

        if (username == null)
            throw new System.ArgumentNullException("username");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/accounts/{accountName}/subscribers/{username}");
        urlBuilder_.Replace(
            "{accountName}",
            Uri.EscapeDataString(Convert.ToString(accountName, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace(
            "{username}",
            Uri.EscapeDataString(Convert.ToString(username, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("DELETE");

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "204")
                    {
                        return;
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "Account or subscriber was not found",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Adds a report license to all users on an account</summary>
    /// <param name="accountName">The name of the account to add the license to</param>
    /// <param name="body">Information of the license to add</param>
    /// <returns>License was added successfully</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task PostReportLicenseAsync(string accountName, CreateUserLicenseForm body)
    {
        return this.PostReportLicenseAsync(accountName, body, CancellationToken.None);
    }

    /// <summary>Adds a report license to all users on an account</summary>
    /// <param name="accountName">The name of the account to add the license to</param>
    /// <param name="body">Information of the license to add</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>License was added successfully</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task PostReportLicenseAsync(
        string accountName,
        CreateUserLicenseForm body,
        CancellationToken cancellationToken)
    {
        if (accountName == null)
            throw new System.ArgumentNullException("accountName");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/accounts/{accountName}/ReportLicenses");
        urlBuilder_.Replace(
            "{accountName}",
            Uri.EscapeDataString(Convert.ToString(accountName, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body));
                content_.Headers.ContentType.MediaType = "application/json";
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("POST");

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "201")
                    {
                        return;
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException("Account was not found", status_, responseData_, headers_, null);
                    }
                    else if (status_ == "400")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException("Report was not found", status_, responseData_, headers_, null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Returns a list of all report licenses available on an account</summary>
    /// <param name="accountName">The name of the account to get the licenses of</param>
    /// <param name="skip">Skip the first X licenses. Used for paging</param>
    /// <param name="take">The number of licenses to retrieve from this request. Used for paging. If the value is null (default), then up to 1000 licenses will be retrieved</param>
    /// <returns>Success</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task GetReportLicensesAsync(string accountName, int? skip, int? take)
    {
        return this.GetReportLicensesAsync(accountName, skip, take, CancellationToken.None);
    }

    /// <summary>Returns a list of all report licenses available on an account</summary>
    /// <param name="accountName">The name of the account to get the licenses of</param>
    /// <param name="skip">Skip the first X licenses. Used for paging</param>
    /// <param name="take">The number of licenses to retrieve from this request. Used for paging. If the value is null (default), then up to 1000 licenses will be retrieved</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task GetReportLicensesAsync(
        string accountName,
        int? skip,
        int? take,
        CancellationToken cancellationToken)
    {
        if (accountName == null)
            throw new System.ArgumentNullException("accountName");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/accounts/{accountName}/ReportLicenses?");
        urlBuilder_.Replace(
            "{accountName}",
            Uri.EscapeDataString(Convert.ToString(accountName, CultureInfo.InvariantCulture)));
        if (skip != null)
            urlBuilder_.Append("Skip=").Append(
                            Uri.EscapeDataString(Convert.ToString(skip.Value, CultureInfo.InvariantCulture)))
                        .Append("&");
        if (take != null)
            urlBuilder_.Append("Take=").Append(
                            Uri.EscapeDataString(Convert.ToString(take.Value, CultureInfo.InvariantCulture)))
                        .Append("&");
        urlBuilder_.Length--;

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        return;
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException("Account was not found", status_, responseData_, headers_, null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Removes a report license from all users on an account</summary>
    /// <param name="accountName">The name of the account to delete the license from</param>
    /// <param name="licenseId">Id of license to delete</param>
    /// <returns>License was successfully deleted</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task DeleteReportLicenseAsync(string accountName, int licenseId)
    {
        return this.DeleteReportLicenseAsync(accountName, licenseId, CancellationToken.None);
    }

    /// <summary>Removes a report license from all users on an account</summary>
    /// <param name="accountName">The name of the account to delete the license from</param>
    /// <param name="licenseId">Id of license to delete</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>License was successfully deleted</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task DeleteReportLicenseAsync(string accountName, int licenseId, CancellationToken cancellationToken)
    {
        if (accountName == null)
            throw new System.ArgumentNullException("accountName");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/accounts/{accountName}/ReportLicenses/{licenseId}");
        urlBuilder_.Replace(
            "{accountName}",
            Uri.EscapeDataString(Convert.ToString(accountName, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace(
            "{licenseId}",
            Uri.EscapeDataString(Convert.ToString(licenseId, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("DELETE");

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "204")
                    {
                        return;
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "Account or license was not found",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ == "400")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "License is not associated with this account",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Adds a category license to all users on an account</summary>
    /// <param name="accountName">The name of the account to add the license to</param>
    /// <param name="body">Information of the license to add</param>
    /// <returns>License was added successfully</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task PostCategoryLicenseAsync(string accountName, CreateCategoryLicenseForm body)
    {
        return this.PostCategoryLicenseAsync(accountName, body, CancellationToken.None);
    }

    /// <summary>Adds a category license to all users on an account</summary>
    /// <param name="accountName">The name of the account to add the license to</param>
    /// <param name="body">Information of the license to add</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>License was added successfully</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task PostCategoryLicenseAsync(
        string accountName,
        CreateCategoryLicenseForm body,
        CancellationToken cancellationToken)
    {
        if (accountName == null)
            throw new System.ArgumentNullException("accountName");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/accounts/{accountName}/category-licenses");
        urlBuilder_.Replace(
            "{accountName}",
            Uri.EscapeDataString(Convert.ToString(accountName, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body));
                content_.Headers.ContentType.MediaType = "application/json";
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("POST");

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "201")
                    {
                        return;
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException("Account was not found", status_, responseData_, headers_, null);
                    }
                    else if (status_ == "400")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "Category was not found",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Returns a list of all category licenses available on an account</summary>
    /// <param name="accountName">The name of the account to get the licenses of</param>
    /// <param name="skip">Skip the first X licenses. Used for paging</param>
    /// <param name="take">The number of licenses to retrieve from this request. Used for paging. If the value is null (default), then up to 1000 licenses will be retrieved</param>
    /// <returns>Success</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task GetAllCategoriesForAccountAsync(string accountName, int? skip, int? take)
    {
        return this.GetAllCategoriesForAccountAsync(accountName, skip, take, CancellationToken.None);
    }

    /// <summary>Returns a list of all category licenses available on an account</summary>
    /// <param name="accountName">The name of the account to get the licenses of</param>
    /// <param name="skip">Skip the first X licenses. Used for paging</param>
    /// <param name="take">The number of licenses to retrieve from this request. Used for paging. If the value is null (default), then up to 1000 licenses will be retrieved</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task GetAllCategoriesForAccountAsync(
        string accountName,
        int? skip,
        int? take,
        CancellationToken cancellationToken)
    {
        if (accountName == null)
            throw new System.ArgumentNullException("accountName");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/accounts/{accountName}/category-licenses?");
        urlBuilder_.Replace(
            "{accountName}",
            Uri.EscapeDataString(Convert.ToString(accountName, CultureInfo.InvariantCulture)));
        if (skip != null)
            urlBuilder_.Append("Skip=").Append(
                            Uri.EscapeDataString(Convert.ToString(skip.Value, CultureInfo.InvariantCulture)))
                        .Append("&");
        if (take != null)
            urlBuilder_.Append("Take=").Append(
                            Uri.EscapeDataString(Convert.ToString(take.Value, CultureInfo.InvariantCulture)))
                        .Append("&");
        urlBuilder_.Length--;

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        return;
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException("Account was not found", status_, responseData_, headers_, null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Removes a category license from all users on an account</summary>
    /// <param name="accountName">The name of the account to delete the license from</param>
    /// <param name="licenseId">Id of license to delete</param>
    /// <returns>License was successfully deleted</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task DeleteCategoryLicenseAsync(string accountName, int licenseId)
    {
        return this.DeleteCategoryLicenseAsync(accountName, licenseId, CancellationToken.None);
    }

    /// <summary>Removes a category license from all users on an account</summary>
    /// <param name="accountName">The name of the account to delete the license from</param>
    /// <param name="licenseId">Id of license to delete</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>License was successfully deleted</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task DeleteCategoryLicenseAsync(string accountName, int licenseId, CancellationToken cancellationToken)
    {
        if (accountName == null)
            throw new System.ArgumentNullException("accountName");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/accounts/{accountName}/category-licenses/{licenseId}");
        urlBuilder_.Replace(
            "{accountName}",
            Uri.EscapeDataString(Convert.ToString(accountName, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace(
            "{licenseId}",
            Uri.EscapeDataString(Convert.ToString(licenseId, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("DELETE");

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "204")
                    {
                        return;
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "Account or license was not found",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ == "400")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "License is not associated with this account",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Adds a report license to a specific user</summary>
    /// <param name="username">The name of the user to add the license to</param>
    /// <param name="body">Information of the license to add</param>
    /// <returns>License was added successfully</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task PostReportLicenseForUserAsync(string username, CreateUserLicenseForm body)
    {
        return this.PostReportLicenseForUserAsync(username, body, CancellationToken.None);
    }

    /// <summary>Adds a report license to a specific user</summary>
    /// <param name="username">The name of the user to add the license to</param>
    /// <param name="body">Information of the license to add</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>License was added successfully</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task PostReportLicenseForUserAsync(
        string username,
        CreateUserLicenseForm body,
        CancellationToken cancellationToken)
    {
        if (username == null)
            throw new System.ArgumentNullException("username");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/subscribers/{username}/ReportLicenses");
        urlBuilder_.Replace(
            "{username}",
            Uri.EscapeDataString(Convert.ToString(username, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body));
                content_.Headers.ContentType.MediaType = "application/json";
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("POST");

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "201")
                    {
                        return;
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException("User was not found", status_, responseData_, headers_, null);
                    }
                    else if (status_ == "400")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException("Report was not found", status_, responseData_, headers_, null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Returns a list of all report licenses available to a specific user</summary>
    /// <param name="username">The username of the user to get the licenses of</param>
    /// <param name="skip">Skip the first X licenses. Used for paging</param>
    /// <param name="take">The number of licenses to retrieve from this request. Used for paging. If the value is null (default), then up to 1000 licenses will be retrieved</param>
    /// <returns>Success</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task GetReportLicensesForUserAsync(string username, int? skip, int? take)
    {
        return this.GetReportLicensesForUserAsync(username, skip, take, CancellationToken.None);
    }

    /// <summary>Returns a list of all report licenses available to a specific user</summary>
    /// <param name="username">The username of the user to get the licenses of</param>
    /// <param name="skip">Skip the first X licenses. Used for paging</param>
    /// <param name="take">The number of licenses to retrieve from this request. Used for paging. If the value is null (default), then up to 1000 licenses will be retrieved</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task GetReportLicensesForUserAsync(
        string username,
        int? skip,
        int? take,
        CancellationToken cancellationToken)
    {
        if (username == null)
            throw new System.ArgumentNullException("username");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/subscribers/{username}/ReportLicenses?");
        urlBuilder_.Replace(
            "{username}",
            Uri.EscapeDataString(Convert.ToString(username, CultureInfo.InvariantCulture)));
        if (skip != null)
            urlBuilder_.Append("Skip=").Append(
                            Uri.EscapeDataString(Convert.ToString(skip.Value, CultureInfo.InvariantCulture)))
                        .Append("&");
        if (take != null)
            urlBuilder_.Append("Take=").Append(
                            Uri.EscapeDataString(Convert.ToString(take.Value, CultureInfo.InvariantCulture)))
                        .Append("&");
        urlBuilder_.Length--;

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        return;
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException("User was not found", status_, responseData_, headers_, null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Get the searches saved by a subscriber</summary>
    /// <param name="username">The username of the subscriber</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<System.Collections.ObjectModel.ObservableCollection<SavedSearchListModel>> GetSavedSearchesAsync(
        string username)
    {
        return this.GetSavedSearchesAsync(username, CancellationToken.None);
    }

    /// <summary>Get the searches saved by a subscriber</summary>
    /// <param name="username">The username of the subscriber</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<System.Collections.ObjectModel.ObservableCollection<SavedSearchListModel>>
        GetSavedSearchesAsync(string username, CancellationToken cancellationToken)
    {
        if (username == null)
            throw new System.ArgumentNullException("username");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/subscribers/{username}/saved-searches");
        urlBuilder_.Replace(
            "{username}",
            Uri.EscapeDataString(Convert.ToString(username, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ =
                            default(System.Collections.ObjectModel.ObservableCollection<SavedSearchListModel>);
                        try
                        {
                            result_ = Newtonsoft
                                .Json.JsonConvert
                                .DeserializeObject<System.Collections.ObjectModel.ObservableCollection<
                                    SavedSearchListModel>>(responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException("User was not found", status_, responseData_, headers_, null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(System.Collections.ObjectModel.ObservableCollection<SavedSearchListModel>);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Save a new search on behalf of a subscriber</summary>
    /// <param name="username">The username of the subscriber</param>
    /// <param name="body"></param>
    /// <returns>Saved search was added successfully. Will return default values for parameters that are not set if applicable.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<SavedSearchModel> PostSavedSearchAsync(string username, AddSavedSearchForm body)
    {
        return this.PostSavedSearchAsync(username, body, CancellationToken.None);
    }

    /// <summary>Save a new search on behalf of a subscriber</summary>
    /// <param name="username">The username of the subscriber</param>
    /// <param name="body"></param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Saved search was added successfully. Will return default values for parameters that are not set if applicable.</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<SavedSearchModel> PostSavedSearchAsync(
        string username,
        AddSavedSearchForm body,
        CancellationToken cancellationToken)
    {
        if (username == null)
            throw new System.ArgumentNullException("username");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/subscribers/{username}/saved-searches");
        urlBuilder_.Replace(
            "{username}",
            Uri.EscapeDataString(Convert.ToString(username, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body));
                content_.Headers.ContentType.MediaType = "application/json";
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("POST");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "201")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ = default(SavedSearchModel);
                        try
                        {
                            result_ = Newtonsoft
                                .Json.JsonConvert.DeserializeObject<SavedSearchModel>(responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ == "400")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "Invalid model state or refering to categories that do not exist",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException("User was not found", status_, responseData_, headers_, null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(SavedSearchModel);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Get the details of a specific saved search for a user</summary>
    /// <param name="username">The username of the subscriber</param>
    /// <param name="id">The id of the search to get. This can be gotten from the "/subscribers/{username}/SavedSearches" method</param>
    /// <returns>Successful operation</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<SavedSearchModel> GetSavedSearchAsync(string username, int id)
    {
        return this.GetSavedSearchAsync(username, id, CancellationToken.None);
    }

    /// <summary>Get the details of a specific saved search for a user</summary>
    /// <param name="username">The username of the subscriber</param>
    /// <param name="id">The id of the search to get. This can be gotten from the "/subscribers/{username}/SavedSearches" method</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<SavedSearchModel> GetSavedSearchAsync(
        string username,
        int id,
        CancellationToken cancellationToken)
    {
        if (username == null)
            throw new System.ArgumentNullException("username");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/subscribers/{username}/saved-searches/{id}");
        urlBuilder_.Replace(
            "{username}",
            Uri.EscapeDataString(Convert.ToString(username, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace("{id}", Uri.EscapeDataString(Convert.ToString(id, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ = default(SavedSearchModel);
                        try
                        {
                            result_ = Newtonsoft
                                .Json.JsonConvert.DeserializeObject<SavedSearchModel>(responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "User or saved search was not found",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(SavedSearchModel);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Delete a saved search for a user</summary>
    /// <param name="username">The username of the subscriber</param>
    /// <param name="id">The id of the search to get. This can be gotten from the /subscribers/{username}/saved-searches method</param>
    /// <returns>Successfully deleted saved search</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task DeleteSavedSearchAsync(string username, int id)
    {
        return this.DeleteSavedSearchAsync(username, id, CancellationToken.None);
    }

    /// <summary>Delete a saved search for a user</summary>
    /// <param name="username">The username of the subscriber</param>
    /// <param name="id">The id of the search to get. This can be gotten from the /subscribers/{username}/saved-searches method</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successfully deleted saved search</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task DeleteSavedSearchAsync(string username, int id, CancellationToken cancellationToken)
    {
        if (username == null)
            throw new System.ArgumentNullException("username");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/subscribers/{username}/saved-searches/{id}");
        urlBuilder_.Replace(
            "{username}",
            Uri.EscapeDataString(Convert.ToString(username, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace("{id}", Uri.EscapeDataString(Convert.ToString(id, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("DELETE");

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "204")
                    {
                        return;
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "User or saved search was not found",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Removes a report license from a specific user</summary>
    /// <param name="username">The username of the user to delete the license from</param>
    /// <param name="id">Id of license to delete</param>
    /// <returns>License was successfully deleted</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task DeleteReportLicenseForUserAsync(string username, int id)
    {
        return this.DeleteReportLicenseForUserAsync(username, id, CancellationToken.None);
    }

    /// <summary>Removes a report license from a specific user</summary>
    /// <param name="username">The username of the user to delete the license from</param>
    /// <param name="id">Id of license to delete</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>License was successfully deleted</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task DeleteReportLicenseForUserAsync(string username, int id, CancellationToken cancellationToken)
    {
        if (username == null)
            throw new System.ArgumentNullException("username");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/subscribers/{username}/ReportLicenses/{id}");
        urlBuilder_.Replace(
            "{username}",
            Uri.EscapeDataString(Convert.ToString(username, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace("{id}", Uri.EscapeDataString(Convert.ToString(id, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("DELETE");

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "204")
                    {
                        return;
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "User or license was not found",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ == "400")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "License is not associated with this user",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Adds a category license to a specific user</summary>
    /// <param name="username">The username of the user to add the license to</param>
    /// <param name="body">Information of the license to add</param>
    /// <returns>License was added successfully</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task PostCategoryLicenseForUser(string username, CreateCategoryLicenseForm body)
    {
        return this.PostCategoryLicenseForUser(username, body, CancellationToken.None);
    }

    /// <summary>Adds a category license to a specific user</summary>
    /// <param name="username">The username of the user to add the license to</param>
    /// <param name="body">Information of the license to add</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>License was added successfully</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task PostCategoryLicenseForUser(
        string username,
        CreateCategoryLicenseForm body,
        CancellationToken cancellationToken)
    {
        if (username == null)
            throw new System.ArgumentNullException("username");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/subscribers/{Username}/category-licenses");
        urlBuilder_.Replace(
            "{username}",
            Uri.EscapeDataString(Convert.ToString(username, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body));
                content_.Headers.ContentType.MediaType = "application/json";
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("POST");

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "201")
                    {
                        return;
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException("User was not found", status_, responseData_, headers_, null);
                    }
                    else if (status_ == "400")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "Category was not found",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Returns a list of all category licenses available to a specific user</summary>
    /// <param name="username">The username of the user to get the licenses of</param>
    /// <param name="skip">Skip the first X licenses. Used for paging</param>
    /// <param name="take">The number of licenses to retrieve from this request. Used for paging. If the value is null (default), then up to 1000 licenses will be retrieved</param>
    /// <returns>Success</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task GetCategoryLicensesForUser(string username, int? skip, int? take)
    {
        return this.GetCategoryLicensesForUser(username, skip, take, CancellationToken.None);
    }

    /// <summary>Returns a list of all category licenses available to a specific user</summary>
    /// <param name="username">The username of the user to get the licenses of</param>
    /// <param name="skip">Skip the first X licenses. Used for paging</param>
    /// <param name="take">The number of licenses to retrieve from this request. Used for paging. If the value is null (default), then up to 1000 licenses will be retrieved</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task GetCategoryLicensesForUser(
        string username,
        int? skip,
        int? take,
        CancellationToken cancellationToken)
    {
        if (username == null)
            throw new System.ArgumentNullException("username");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/subscribers/{Username}/category-licenses?");
        urlBuilder_.Replace(
            "{username}",
            Uri.EscapeDataString(Convert.ToString(username, CultureInfo.InvariantCulture)));
        if (skip != null)
            urlBuilder_.Append("Skip=").Append(
                            Uri.EscapeDataString(Convert.ToString(skip.Value, CultureInfo.InvariantCulture)))
                        .Append("&");
        if (take != null)
            urlBuilder_.Append("Take=").Append(
                            Uri.EscapeDataString(Convert.ToString(take.Value, CultureInfo.InvariantCulture)))
                        .Append("&");
        urlBuilder_.Length--;

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        return;
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException("User was not found", status_, responseData_, headers_, null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Removes a category license from a specific user</summary>
    /// <param name="username">The username of the user to delete the license from</param>
    /// <param name="licenseId">Id of license to delete</param>
    /// <returns>License was successfully deleted</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task DeleteCategoryLicenseForUser(string username, int licenseId)
    {
        return this.DeleteCategoryLicenseForUser(username, licenseId, CancellationToken.None);
    }

    /// <summary>Removes a category license from a specific user</summary>
    /// <param name="username">The username of the user to delete the license from</param>
    /// <param name="licenseId">Id of license to delete</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>License was successfully deleted</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task DeleteCategoryLicenseForUser(string username, int licenseId, CancellationToken cancellationToken)
    {
        if (username == null)
            throw new System.ArgumentNullException("username");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/subscribers/{Username}/category-licenses/{licenseId}");
        urlBuilder_.Replace(
            "{username}",
            Uri.EscapeDataString(Convert.ToString(username, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace(
            "{licenseId}",
            Uri.EscapeDataString(Convert.ToString(licenseId, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("DELETE");

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "204")
                    {
                        return;
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "User or license was not found",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ == "400")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "License is not associated with this user",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Gets a license</summary>
    /// <param name="licenseId">Id of license to retrieve</param>
    /// <returns>Successful operation</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<LicenseModel> GetLicenseAsync(int licenseId)
    {
        return this.GetLicenseAsync(licenseId, CancellationToken.None);
    }

    /// <summary>Gets a license</summary>
    /// <param name="licenseId">Id of license to retrieve</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Successful operation</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<LicenseModel> GetLicenseAsync(int licenseId, CancellationToken cancellationToken)
    {
        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/licenses/{licenseId}");
        urlBuilder_.Replace(
            "{licenseId}",
            Uri.EscapeDataString(Convert.ToString(licenseId, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ = default(LicenseModel);
                        try
                        {
                            result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<LicenseModel>(responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException("License was not found", status_, responseData_, headers_, null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(LicenseModel);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Edit external report link settings</summary>
    /// <param name="libraryCode">The library code of the external report to edit</param>
    /// <param name="productCode">The product code of the external report to edit</param>
    /// <param name="body">The information to edit the external report link settings with</param>
    /// <returns>Edited successfully</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task PutExternalReportLinkSettingsAsync(string libraryCode, string productCode, ExternalProductLinkForm body)
    {
        return this.PutExternalReportLinkSettingsAsync(libraryCode, productCode, body, CancellationToken.None);
    }

    /// <summary>Edit external report link settings</summary>
    /// <param name="libraryCode">The library code of the external report to edit</param>
    /// <param name="productCode">The product code of the external report to edit</param>
    /// <param name="body">The information to edit the external report link settings with</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Edited successfully</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task PutExternalReportLinkSettingsAsync(
        string libraryCode,
        string productCode,
        ExternalProductLinkForm body,
        CancellationToken cancellationToken)
    {
        if (libraryCode == null)
            throw new System.ArgumentNullException("libraryCode");

        if (productCode == null)
            throw new System.ArgumentNullException("productCode");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/libraries/{LibraryCode}/products/{ProductCode}/ExternalProductLink");
        urlBuilder_.Replace(
            "{LibraryCode}",
            Uri.EscapeDataString(Convert.ToString(libraryCode, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace(
            "{ProductCode}",
            Uri.EscapeDataString(Convert.ToString(productCode, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body));
                content_.Headers.ContentType.MediaType = "application/json";
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("PUT");

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        return;
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException("Report was not found", status_, responseData_, headers_, null);
                    }
                    else if (status_ == "400")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "Report is not an external report",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Get external report link settings</summary>
    /// <param name="libraryCode">The library code of the external report to get</param>
    /// <param name="productCode">The product code of the external report to get</param>
    /// <returns>Success</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<ExternalProductLinkForm> GetExternalReportLinkSettingsAsync(string libraryCode, string productCode)
    {
        return this.GetExternalReportLinkSettingsAsync(libraryCode, productCode, CancellationToken.None);
    }

    /// <summary>Get external report link settings</summary>
    /// <param name="libraryCode">The library code of the external report to get</param>
    /// <param name="productCode">The product code of the external report to get</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<ExternalProductLinkForm> GetExternalReportLinkSettingsAsync(
        string libraryCode,
        string productCode,
        CancellationToken cancellationToken)
    {
        if (libraryCode == null)
            throw new System.ArgumentNullException("libraryCode");

        if (productCode == null)
            throw new System.ArgumentNullException("productCode");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append("/libraries/{LibraryCode}/products/{ProductCode}/ExternalProductLink");
        urlBuilder_.Replace(
            "{LibraryCode}",
            Uri.EscapeDataString(Convert.ToString(libraryCode, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace(
            "{ProductCode}",
            Uri.EscapeDataString(Convert.ToString(productCode, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ = default(ExternalProductLinkForm);
                        try
                        {
                            result_ =
                                Newtonsoft.Json.JsonConvert.DeserializeObject<ExternalProductLinkForm>(
                                    responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException("Report was not found", status_, responseData_, headers_, null);
                    }
                    else if (status_ == "400")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "Report is not an external report",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(ExternalProductLinkForm);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Uploads a marketing brochure to a product</summary>
    /// <param name="body">The contents and extension of the file to upload</param>
    /// <param name="libraryCode">The library code of the product to upload the brochure to</param>
    /// <param name="productCode">The product code of the product to upload the brochure to</param>
    /// <returns>Success</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task PostMarketingBrochureAsync(MarketingBrochureForm body, string libraryCode, string productCode)
    {
        return this.PostMarketingBrochureAsync(body, libraryCode, productCode, CancellationToken.None);
    }

    /// <summary>Uploads a marketing brochure to a product</summary>
    /// <param name="body">The contents and extension of the file to upload</param>
    /// <param name="libraryCode">The library code of the product to upload the brochure to</param>
    /// <param name="productCode">The product code of the product to upload the brochure to</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task PostMarketingBrochureAsync(
        MarketingBrochureForm body,
        string libraryCode,
        string productCode,
        CancellationToken cancellationToken)
    {
        if (libraryCode == null)
            throw new System.ArgumentNullException("libraryCode");

        if (productCode == null)
            throw new System.ArgumentNullException("productCode");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append(
            "/libraries/{libraryCode}/products/{productCode}/marketing-brochure-file");
        urlBuilder_.Replace(
            "{LibraryCode}",
            Uri.EscapeDataString(Convert.ToString(libraryCode, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace(
            "{ProductCode}",
            Uri.EscapeDataString(Convert.ToString(productCode, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body));
                content_.Headers.ContentType.MediaType = "application/json";
                request_.Content = content_;
                request_.Method = new System.Net.Http.HttpMethod("POST");

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        return;
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Gets a temporary URL for the marketing brochure of a product</summary>
    /// <param name="libraryCode">The library code of the product to retrieve the marketing brochure for</param>
    /// <param name="productCode">The product code of the product to retrieve the marketing brochure for</param>
    /// <returns>Success</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task<MarketingBrochureModel> GetMarketingBrochureUrlAsync(string libraryCode, string productCode)
    {
        return this.GetMarketingBrochureUrlAsync(libraryCode, productCode, CancellationToken.None);
    }

    /// <summary>Gets a temporary URL for the marketing brochure of a product</summary>
    /// <param name="libraryCode">The library code of the product to retrieve the marketing brochure for</param>
    /// <param name="productCode">The product code of the product to retrieve the marketing brochure for</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task<MarketingBrochureModel> GetMarketingBrochureUrlAsync(
        string libraryCode,
        string productCode,
        CancellationToken cancellationToken)
    {
        if (libraryCode == null)
            throw new System.ArgumentNullException("libraryCode");

        if (productCode == null)
            throw new System.ArgumentNullException("productCode");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append(
            "/libraries/{libraryCode}/products/{productCode}/marketing-brochure-file");
        urlBuilder_.Replace(
            "{LibraryCode}",
            Uri.EscapeDataString(Convert.ToString(libraryCode, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace(
            "{ProductCode}",
            Uri.EscapeDataString(Convert.ToString(productCode, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("GET");
                request_.Headers.Accept.Add(
                    new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "200")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var result_ = default(MarketingBrochureModel);
                        try
                        {
                            result_ =
                                Newtonsoft.Json.JsonConvert
                                            .DeserializeObject<MarketingBrochureModel>(responseData_);
                            return result_;
                        }
                        catch (System.Exception exception)
                        {
                            throw new SwaggerException(
                                "Could not deserialize the response body.",
                                status_,
                                responseData_,
                                headers_,
                                exception);
                        }
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "No marketing brochure was found for this product",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }

                    return default(MarketingBrochureModel);
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    /// <summary>Deletes the uploaded marketing brochure for a product</summary>
    /// <param name="libraryCode">The library code of the product to delete the marketing brochure from</param>
    /// <param name="productCode">The product code of the product to delete the marketing brochure from</param>
    /// <returns>Success</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public Task DeleteMarketingBrochureAsync(string libraryCode, string productCode)
    {
        return this.DeleteMarketingBrochureAsync(libraryCode, productCode, CancellationToken.None);
    }

    /// <summary>Deletes the uploaded marketing brochure for a product</summary>
    /// <param name="libraryCode">The library code of the product to delete the marketing brochure from</param>
    /// <param name="productCode">The product code of the product to delete the marketing brochure from</param>
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="SwaggerException">A server side error occurred.</exception>
    public async Task DeleteMarketingBrochureAsync(
        string libraryCode,
        string productCode,
        CancellationToken cancellationToken)
    {
        if (libraryCode == null)
            throw new System.ArgumentNullException("libraryCode");

        if (productCode == null)
            throw new System.ArgumentNullException("productCode");

        var urlBuilder_ = new System.Text.StringBuilder();
        urlBuilder_.Append(BaseUrl).Append(
            "/libraries/{libraryCode}/products/{productCode}/marketing-brochure-file");
        urlBuilder_.Replace(
            "{LibraryCode}",
            Uri.EscapeDataString(Convert.ToString(libraryCode, CultureInfo.InvariantCulture)));
        urlBuilder_.Replace(
            "{ProductCode}",
            Uri.EscapeDataString(Convert.ToString(productCode, CultureInfo.InvariantCulture)));

        var client_ = _httpClient;
        try
        {
            using (var request_ = new HttpRequestMessage())
            {
                request_.Method = new System.Net.Http.HttpMethod("DELETE");

                PrepareRequest(client_, request_, urlBuilder_);
                var url_ = urlBuilder_.ToString();
                request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
                PrepareRequest(client_, request_, url_);

                var response_ = await client_.SendAsync(
                    request_,
                    System.Net.Http.HttpCompletionOption.ResponseHeadersRead,
                    cancellationToken).ConfigureAwait(false);
                try
                {
                    var headers_ =
                        System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                    foreach (var item_ in response_.Content.Headers)
                        headers_[item_.Key] = item_.Value;

                    ProcessResponse(client_, response_);

                    var status_ = ((int)response_.StatusCode).ToString();
                    if (status_ == "204")
                    {
                        return;
                    }
                    else if (status_ == "404")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "No marketing brochure was found for this product",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                    else if (status_ != "200" && status_ != "204")
                    {
                        var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                        throw new SwaggerException(
                            "The HTTP status code of the response was not expected (" + (int)response_.StatusCode +
                            ").",
                            status_,
                            responseData_,
                            headers_,
                            null);
                    }
                }
                finally
                {
                    if (response_ != null)
                        response_.Dispose();
                }
            }
        }
        finally
        {
        }
    }

    #region IDisposable Support
    private bool disposedValue = false; // To detect redundant calls

    protected virtual void Dispose(bool disposing)
    {
        if (!disposedValue)
        {
            if (disposing)
            {
                this._httpClient?.Dispose();
            }

            disposedValue = true;
        }
    }

    // TODO: override a finalizer only if Dispose(bool disposing) above has code to free unmanaged resources.
    // ~IReportsLibrary() {
    //   // Do not change this code. Put cleanup code in Dispose(bool disposing) above.
    //   Dispose(false);
    // }

    // This code added to correctly implement the disposable pattern.
    void IDisposable.Dispose()
    {
        // Do not change this code. Put cleanup code in Dispose(bool disposing) above.
        Dispose(true);
        // TODO: uncomment the following line if the finalizer is overridden above.
        // GC.SuppressFinalize(this);
    }
    #endregion

}



[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class ProductImportDataModel : System.ComponentModel.INotifyPropertyChanged
{
    private object _upload;
    private ProductImportDataModelTarget? _target;

    /// <summary>The file to be imported.</summary>
    [Newtonsoft.Json.JsonProperty(
        "upload",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Upload
    {
        get { return _upload; }
        set
        {
            if (_upload != value)
            {
                _upload = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>How the product should display the import.</summary>
    [Newtonsoft.Json.JsonProperty(
        "target",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ProductImportDataModelTarget? Target
    {
        get { return _target; }
        set
        {
            if (_target != value)
            {
                _target = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ProductImportDataModel FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductImportDataModel>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class ProductUploadStatusDataModel : System.ComponentModel.INotifyPropertyChanged
{
    private ProductUploadStatusDataModelStage? _stage;
    private System.Collections.ObjectModel.ObservableCollection<string> _messages;
    private ProductUploadStylesDataModel _styles;

    /// <summary>The stage the job is in</summary>
    [Newtonsoft.Json.JsonProperty(
        "stage",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ProductUploadStatusDataModelStage? Stage
    {
        get { return _stage; }
        set
        {
            if (_stage != value)
            {
                _stage = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Messages reported during processing of the document</summary>
    [Newtonsoft.Json.JsonProperty(
        "messages",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.ObjectModel.ObservableCollection<string> Messages
    {
        get { return _messages; }
        set
        {
            if (_messages != value)
            {
                _messages = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "styles",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ProductUploadStylesDataModel Styles
    {
        get { return _styles; }
        set
        {
            if (_styles != value)
            {
                _styles = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ProductUploadStatusDataModel FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductUploadStatusDataModel>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class ProductUploadStylesDataModel : System.ComponentModel.INotifyPropertyChanged
{
    private System.Collections.ObjectModel.ObservableCollection<string> _possibleStyles;
    private System.Collections.Generic.Dictionary<string, string> _mappedStyles;
    private System.Collections.ObjectModel.ObservableCollection<string> _unmappedStyles;

    /// <summary>The list of style names that are allowed</summary>
    [Newtonsoft.Json.JsonProperty(
        "possibleStyles",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.ObjectModel.ObservableCollection<string> PossibleStyles
    {
        get { return _possibleStyles; }
        set
        {
            if (_possibleStyles != value)
            {
                _possibleStyles = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The styles which have been mapped. Keys are the style name in the document, values should be one of the 'PossibleStyles'</summary>
    [Newtonsoft.Json.JsonProperty(
        "mappedStyles",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.Dictionary<string, string> MappedStyles
    {
        get { return _mappedStyles; }
        set
        {
            if (_mappedStyles != value)
            {
                _mappedStyles = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "unmappedStyles",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.ObjectModel.ObservableCollection<string> UnmappedStyles
    {
        get { return _unmappedStyles; }
        set
        {
            if (_unmappedStyles != value)
            {
                _unmappedStyles = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ProductUploadStylesDataModel FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductUploadStylesDataModel>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class ImportStylesForm : System.ComponentModel.INotifyPropertyChanged
{
    private string _extension;
    private object _styles;

    /// <summary>The type of file which the styles apply to</summary>
    [Newtonsoft.Json.JsonProperty(
        "Extension",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Extension
    {
        get { return _extension; }
        set
        {
            if (_extension != value)
            {
                _extension = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The dictionary of styles to map from and to. The properties should be simple strings, which are one of the PossibleStyles for the extension</summary>
    [Newtonsoft.Json.JsonProperty(
        "Styles",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Styles
    {
        get { return _styles; }
        set
        {
            if (_styles != value)
            {
                _styles = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ImportStylesForm FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<ImportStylesForm>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class ImportedDocumentStylesDataModel : System.ComponentModel.INotifyPropertyChanged
{
    private System.Collections.ObjectModel.ObservableCollection<string> _possibleStyles;
    private System.Collections.Generic.Dictionary<string, string> _mappedStyles;

    /// <summary>The list of style names that are allowed</summary>
    [Newtonsoft.Json.JsonProperty(
        "possibleStyles",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.ObjectModel.ObservableCollection<string> PossibleStyles
    {
        get { return _possibleStyles; }
        set
        {
            if (_possibleStyles != value)
            {
                _possibleStyles = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The styles which have been mapped. Keys are the style name in the document, values should be one of the 'PossibleStyles'</summary>
    [Newtonsoft.Json.JsonProperty(
        "mappedStyles",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.Dictionary<string, string> MappedStyles
    {
        get { return _mappedStyles; }
        set
        {
            if (_mappedStyles != value)
            {
                _mappedStyles = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ImportedDocumentStylesDataModel FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<ImportedDocumentStylesDataModel>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class WelcomeEmailForm : System.ComponentModel.INotifyPropertyChanged
{
    private System.Collections.ObjectModel.ObservableCollection<string> _accountNames =
        new System.Collections.ObjectModel.ObservableCollection<string>();

    /// <summary>The names of accounts to send the emails for.</summary>
    [Newtonsoft.Json.JsonProperty("AccountNames", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.ObjectModel.ObservableCollection<string> AccountNames
    {
        get { return _accountNames; }
        set
        {
            if (_accountNames != value)
            {
                _accountNames = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static WelcomeEmailForm FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<WelcomeEmailForm>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class AccountCreateForm : System.ComponentModel.INotifyPropertyChanged
{
    private string _companyName;
    private string _countryCode;
    private bool? _isEnabled;

    /// <summary>The name of the company the account is for.</summary>
    [Newtonsoft.Json.JsonProperty("CompanyName", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public string CompanyName
    {
        get { return _companyName; }
        set
        {
            if (_companyName != value)
            {
                _companyName = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The country code for the account</summary>
    [Newtonsoft.Json.JsonProperty("CountryCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public string CountryCode
    {
        get { return _countryCode; }
        set
        {
            if (_countryCode != value)
            {
                _countryCode = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Is the account enabled.</summary>
    [Newtonsoft.Json.JsonProperty(
        "IsEnabled",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsEnabled
    {
        get { return _isEnabled; }
        set
        {
            if (_isEnabled != value)
            {
                _isEnabled = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static AccountCreateForm FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<AccountCreateForm>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class AccountRegistrationCreateForm : System.ComponentModel.INotifyPropertyChanged
{
    private AccountRegistrationCreateFormRegistrationType? _registrationType;

    /// <summary>Registration type of account.</summary>
    [Newtonsoft.Json.JsonProperty(
        "RegistrationType",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public AccountRegistrationCreateFormRegistrationType? RegistrationType
    {
        get { return _registrationType; }
        set
        {
            if (_registrationType != value)
            {
                _registrationType = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static AccountRegistrationCreateForm FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<AccountRegistrationCreateForm>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class AccountAccessSearchResults : System.ComponentModel.INotifyPropertyChanged
{
    private string _accountName;
    private AccountAccessSearchResultsRegistrationType? _registrationType;
    private string _accessCode;

    /// <summary>The name of the account.</summary>
    [Newtonsoft.Json.JsonProperty(
        "AccountName",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AccountName
    {
        get { return _accountName; }
        set
        {
            if (_accountName != value)
            {
                _accountName = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The registration level of the account.</summary>
    [Newtonsoft.Json.JsonProperty(
        "RegistrationType",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public AccountAccessSearchResultsRegistrationType? RegistrationType
    {
        get { return _registrationType; }
        set
        {
            if (_registrationType != value)
            {
                _registrationType = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The secure unique access code used to register into the account.</summary>
    [Newtonsoft.Json.JsonProperty(
        "AccessCode",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AccessCode
    {
        get { return _accessCode; }
        set
        {
            if (_accessCode != value)
            {
                _accessCode = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static AccountAccessSearchResults FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<AccountAccessSearchResults>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class AccountSearchResults : System.ComponentModel.INotifyPropertyChanged
{
    private string _name;
    private string _companyName;
    private string _countryCode;
    private bool? _isEnabled;

    /// <summary>The name of the account.</summary>
    [Newtonsoft.Json.JsonProperty(
        "Name",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name
    {
        get { return _name; }
        set
        {
            if (_name != value)
            {
                _name = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The name of the company attached to account.</summary>
    [Newtonsoft.Json.JsonProperty(
        "CompanyName",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CompanyName
    {
        get { return _companyName; }
        set
        {
            if (_companyName != value)
            {
                _companyName = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The country code attached to account.</summary>
    [Newtonsoft.Json.JsonProperty(
        "CountryCode",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CountryCode
    {
        get { return _countryCode; }
        set
        {
            if (_countryCode != value)
            {
                _countryCode = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Whether the account is enabled.</summary>
    [Newtonsoft.Json.JsonProperty(
        "IsEnabled",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsEnabled
    {
        get { return _isEnabled; }
        set
        {
            if (_isEnabled != value)
            {
                _isEnabled = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static AccountSearchResults FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<AccountSearchResults>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class ProductSearchResults : System.ComponentModel.INotifyPropertyChanged
{
    private System.Collections.ObjectModel.ObservableCollection<ProductSummary> _products;
    private int? _productCount;

    /// <summary>The products which have matched the query</summary>
    [Newtonsoft.Json.JsonProperty(
        "Products",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.ObjectModel.ObservableCollection<ProductSummary> Products
    {
        get { return _products; }
        set
        {
            if (_products != value)
            {
                _products = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Total number of products which match the query, disregarding Skip and Take</summary>
    [Newtonsoft.Json.JsonProperty(
        "ProductCount",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? ProductCount
    {
        get { return _productCount; }
        set
        {
            if (_productCount != value)
            {
                _productCount = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ProductSearchResults FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductSearchResults>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class ProductSummary : System.ComponentModel.INotifyPropertyChanged
{
    private string _productCode;
    private string _title;
    private string _uILink;
    private string _apiLink;
    private bool? _licensed;

    /// <summary>Unique code of the product</summary>
    [Newtonsoft.Json.JsonProperty(
        "ProductCode",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ProductCode
    {
        get { return _productCode; }
        set
        {
            if (_productCode != value)
            {
                _productCode = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Title of the product</summary>
    [Newtonsoft.Json.JsonProperty(
        "Title",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title
    {
        get { return _title; }
        set
        {
            if (_title != value)
            {
                _title = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Url to the product in the front-end UI</summary>
    [Newtonsoft.Json.JsonProperty(
        "UILink",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string UILink
    {
        get { return _uILink; }
        set
        {
            if (_uILink != value)
            {
                _uILink = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Url to more information on this product in this API</summary>
    [Newtonsoft.Json.JsonProperty(
        "ApiLink",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ApiLink
    {
        get { return _apiLink; }
        set
        {
            if (_apiLink != value)
            {
                _apiLink = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Whether the current user has a license to this product or not.</summary>
    [Newtonsoft.Json.JsonProperty(
        "Licensed",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? Licensed
    {
        get { return _licensed; }
        set
        {
            if (_licensed != value)
            {
                _licensed = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ProductSummary FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductSummary>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class ProductRevisionIdModel : System.ComponentModel.INotifyPropertyChanged
{
    private string _libraryCode;
    private string _productCode;
    private string _revisionCode;

    /// <summary>The code of the library the product is in</summary>
    [Newtonsoft.Json.JsonProperty("LibraryCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public string LibraryCode
    {
        get { return _libraryCode; }
        set
        {
            if (_libraryCode != value)
            {
                _libraryCode = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Unique code of the product</summary>
    [Newtonsoft.Json.JsonProperty("ProductCode", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public string ProductCode
    {
        get { return _productCode; }
        set
        {
            if (_productCode != value)
            {
                _productCode = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The code identifying the revision of the product</summary>
    [Newtonsoft.Json.JsonProperty(
        "RevisionCode",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string RevisionCode
    {
        get { return _revisionCode; }
        set
        {
            if (_revisionCode != value)
            {
                _revisionCode = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ProductRevisionIdModel FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductRevisionIdModel>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class AttachmentFileModel : System.ComponentModel.INotifyPropertyChanged
{
    private string _fileName;
    private string _extension;
    private string _fileCode;

    [Newtonsoft.Json.JsonProperty(
        "FileName",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FileName
    {
        get { return _fileName; }
        set
        {
            if (_fileName != value)
            {
                _fileName = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "Extension",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Extension
    {
        get { return _extension; }
        set
        {
            if (_extension != value)
            {
                _extension = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "FileCode",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FileCode
    {
        get { return _fileCode; }
        set
        {
            if (_fileCode != value)
            {
                _fileCode = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static AttachmentFileModel FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<AttachmentFileModel>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class ProductMetadataModel : System.ComponentModel.INotifyPropertyChanged
{
    private string _productCode;
    private string _title;
    private string _subtitle;
    private string _description;
    private int? _price;
    private string _priceLabel;
    private System.DateTime? _publicationDate;
    private string _marketingDescription;
    private bool? _isPrivate;
    private bool? _isComingSoon;
    private bool? _isArchived;
    private bool? _isDisabled;
    private string _type;
    private string _shortTitle;
    private ProductExtendedMetadataModel _extendedMetadata;
    private System.Collections.ObjectModel.ObservableCollection<ProductAuthorForm> _authors;
    private System.Collections.ObjectModel.ObservableCollection<string> _categories;
    private ProductBuyItNowDataModel _buyItNowLink;
    private System.Collections.ObjectModel.ObservableCollection<ProductLinkModel> _links;
    private System.Collections.ObjectModel.ObservableCollection<AttachmentFileModel> _printCopies;
    private System.Collections.ObjectModel.ObservableCollection<AttachmentFileModel> _attachments;

    /// <summary>Unique code of the product</summary>
    [Newtonsoft.Json.JsonProperty(
        "ProductCode",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ProductCode
    {
        get { return _productCode; }
        set
        {
            if (_productCode != value)
            {
                _productCode = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Title of the product. Can contain HTML</summary>
    [Newtonsoft.Json.JsonProperty(
        "Title",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title
    {
        get { return _title; }
        set
        {
            if (_title != value)
            {
                _title = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Subtitle of the product. Can contain HTML</summary>
    [Newtonsoft.Json.JsonProperty(
        "Subtitle",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Subtitle
    {
        get { return _subtitle; }
        set
        {
            if (_subtitle != value)
            {
                _subtitle = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Description the product. Can contain HTML</summary>
    [Newtonsoft.Json.JsonProperty(
        "Description",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description
    {
        get { return _description; }
        set
        {
            if (_description != value)
            {
                _description = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Price of the product</summary>
    [Newtonsoft.Json.JsonProperty(
        "Price",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Price
    {
        get { return _price; }
        set
        {
            if (_price != value)
            {
                _price = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Label of the price</summary>
    [Newtonsoft.Json.JsonProperty(
        "PriceLabel",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PriceLabel
    {
        get { return _priceLabel; }
        set
        {
            if (_priceLabel != value)
            {
                _priceLabel = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Date and time of product publication. Null if product is continuously updated</summary>
    [Newtonsoft.Json.JsonProperty(
        "PublicationDate",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTime? PublicationDate
    {
        get { return _publicationDate; }
        set
        {
            if (_publicationDate != value)
            {
                _publicationDate = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Shown in addition to the description on marketing pages. Can contain HTML</summary>
    [Newtonsoft.Json.JsonProperty(
        "MarketingDescription",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string MarketingDescription
    {
        get { return _marketingDescription; }
        set
        {
            if (_marketingDescription != value)
            {
                _marketingDescription = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Whether the product is private or not</summary>
    [Newtonsoft.Json.JsonProperty(
        "IsPrivate",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsPrivate
    {
        get { return _isPrivate; }
        set
        {
            if (_isPrivate != value)
            {
                _isPrivate = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Whether the product is coming soon or not</summary>
    [Newtonsoft.Json.JsonProperty(
        "IsComingSoon",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsComingSoon
    {
        get { return _isComingSoon; }
        set
        {
            if (_isComingSoon != value)
            {
                _isComingSoon = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Whether the product is archived or not</summary>
    [Newtonsoft.Json.JsonProperty(
        "IsArchived",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsArchived
    {
        get { return _isArchived; }
        set
        {
            if (_isArchived != value)
            {
                _isArchived = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Whether the product is disabled or not</summary>
    [Newtonsoft.Json.JsonProperty(
        "IsDisabled",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsDisabled
    {
        get { return _isDisabled; }
        set
        {
            if (_isDisabled != value)
            {
                _isDisabled = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Type of the product</summary>
    [Newtonsoft.Json.JsonProperty(
        "Type",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type
    {
        get { return _type; }
        set
        {
            if (_type != value)
            {
                _type = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Shown when navigating between products within the same series</summary>
    [Newtonsoft.Json.JsonProperty(
        "ShortTitle",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ShortTitle
    {
        get { return _shortTitle; }
        set
        {
            if (_shortTitle != value)
            {
                _shortTitle = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "ExtendedMetadata",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ProductExtendedMetadataModel ExtendedMetadata
    {
        get { return _extendedMetadata; }
        set
        {
            if (_extendedMetadata != value)
            {
                _extendedMetadata = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "Authors",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.ObjectModel.ObservableCollection<ProductAuthorForm> Authors
    {
        get { return _authors; }
        set
        {
            if (_authors != value)
            {
                _authors = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "Categories",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.ObjectModel.ObservableCollection<string> Categories
    {
        get { return _categories; }
        set
        {
            if (_categories != value)
            {
                _categories = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "BuyItNowLink",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ProductBuyItNowDataModel BuyItNowLink
    {
        get { return _buyItNowLink; }
        set
        {
            if (_buyItNowLink != value)
            {
                _buyItNowLink = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "Links",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.ObjectModel.ObservableCollection<ProductLinkModel> Links
    {
        get { return _links; }
        set
        {
            if (_links != value)
            {
                _links = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "PrintCopies",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.ObjectModel.ObservableCollection<AttachmentFileModel> PrintCopies
    {
        get { return _printCopies; }
        set
        {
            if (_printCopies != value)
            {
                _printCopies = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "Attachments",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.ObjectModel.ObservableCollection<AttachmentFileModel> Attachments
    {
        get { return _attachments; }
        set
        {
            if (_attachments != value)
            {
                _attachments = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ProductMetadataModel FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductMetadataModel>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class ProductMetadataForm : System.ComponentModel.INotifyPropertyChanged
{
    private string _title;
    private string _subtitle;
    private string _description;
    private int? _price;
    private string _priceLabel;
    private System.DateTime? _publicationDate;
    private string _marketingDescription;
    private bool? _isPrivate = false;
    private bool? _isComingSoon = false;
    private bool? _isArchived = false;
    private bool? _isDisabled = false;
    private ProductMetadataFormType _type;
    private string _shortTitle;
    private bool? _createOnly = false;

    /// <summary>Title of the product. Can contain HTML.
    /// 
    /// NB. Ignored for products pulled from external systems (like Dataviewer)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Title", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public string Title
    {
        get { return _title; }
        set
        {
            if (_title != value)
            {
                _title = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Subtitle of the product. Must not have more than 200 characters. Can contain HTML.
    /// 
    /// NB. Ignored for products pulled from external systems (like Dataviewer)
    /// </summary>
    [Newtonsoft.Json.JsonProperty(
        "Subtitle",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Subtitle
    {
        get { return _subtitle; }
        set
        {
            if (_subtitle != value)
            {
                _subtitle = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Description of the product. Can contain HTML.
    /// 
    /// NB. Ignored for products pulled from external systems (like Dataviewer)
    /// </summary>
    [Newtonsoft.Json.JsonProperty(
        "Description",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description
    {
        get { return _description; }
        set
        {
            if (_description != value)
            {
                _description = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Price of the product. Must be greater than or equal to zero.</summary>
    [Newtonsoft.Json.JsonProperty(
        "Price",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Price
    {
        get { return _price; }
        set
        {
            if (_price != value)
            {
                _price = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Label of the price</summary>
    [Newtonsoft.Json.JsonProperty(
        "PriceLabel",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string PriceLabel
    {
        get { return _priceLabel; }
        set
        {
            if (_priceLabel != value)
            {
                _priceLabel = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Date and time of product publication. Null if product is continuously updated
    /// 
    /// NB. Ignored for products pulled from external systems (like Dataviewer)
    /// </summary>
    [Newtonsoft.Json.JsonProperty(
        "PublicationDate",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTime? PublicationDate
    {
        get { return _publicationDate; }
        set
        {
            if (_publicationDate != value)
            {
                _publicationDate = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Shown in addition to the description on marketing pages. Can contain HTML</summary>
    [Newtonsoft.Json.JsonProperty(
        "MarketingDescription",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string MarketingDescription
    {
        get { return _marketingDescription; }
        set
        {
            if (_marketingDescription != value)
            {
                _marketingDescription = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Whether the product is private or not</summary>
    [Newtonsoft.Json.JsonProperty(
        "IsPrivate",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsPrivate
    {
        get { return _isPrivate; }
        set
        {
            if (_isPrivate != value)
            {
                _isPrivate = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Whether the product is coming soon or not</summary>
    [Newtonsoft.Json.JsonProperty(
        "IsComingSoon",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsComingSoon
    {
        get { return _isComingSoon; }
        set
        {
            if (_isComingSoon != value)
            {
                _isComingSoon = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Whether the product is archived or not</summary>
    [Newtonsoft.Json.JsonProperty(
        "IsArchived",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsArchived
    {
        get { return _isArchived; }
        set
        {
            if (_isArchived != value)
            {
                _isArchived = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Whether the product is disabled or not</summary>
    [Newtonsoft.Json.JsonProperty(
        "IsDisabled",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsDisabled
    {
        get { return _isDisabled; }
        set
        {
            if (_isDisabled != value)
            {
                _isDisabled = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Type of the product
    /// 
    /// NB. Ignored for products pulled from external systems (like Dataviewer)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ProductMetadataFormType Type
    {
        get { return _type; }
        set
        {
            if (_type != value)
            {
                _type = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Shown when navigating between products within the same series</summary>
    [Newtonsoft.Json.JsonProperty(
        "ShortTitle",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ShortTitle
    {
        get { return _shortTitle; }
        set
        {
            if (_shortTitle != value)
            {
                _shortTitle = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Indicates that the specified product should be created and if it already exists an error code should be returned.</summary>
    [Newtonsoft.Json.JsonProperty(
        "CreateOnly",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? CreateOnly
    {
        get { return _createOnly; }
        set
        {
            if (_createOnly != value)
            {
                _createOnly = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ProductMetadataForm FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductMetadataForm>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class ProductExtendedMetadataModel : System.ComponentModel.INotifyPropertyChanged
{
    private System.DateTime? _createdDate;
    private string _marketingLink;
    private string _marketingTocLink;
    private string _languageCode;
    private System.Collections.ObjectModel.ObservableCollection<string> _metaKeywords;
    private int? _pageCount;
    private string _lastUpdatedBy;
    private System.DateTime? _contentImportedOn;
    private string _extraTextfield;
    private System.DateTime? _contentUpdatedOn;
    private string _newsTitle;
    private object _thirdPartyMetadata;

    /// <summary>Date and time of product creation</summary>
    [Newtonsoft.Json.JsonProperty(
        "CreatedDate",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTime? CreatedDate
    {
        get { return _createdDate; }
        set
        {
            if (_createdDate != value)
            {
                _createdDate = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Markerting Url to provide users extra source of information</summary>
    [Newtonsoft.Json.JsonProperty(
        "MarketingLink",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string MarketingLink
    {
        get { return _marketingLink; }
        set
        {
            if (_marketingLink != value)
            {
                _marketingLink = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Marketing Toc Url to an alternative Toc, perhaps containing more detail</summary>
    [Newtonsoft.Json.JsonProperty(
        "MarketingTocLink",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string MarketingTocLink
    {
        get { return _marketingTocLink; }
        set
        {
            if (_marketingTocLink != value)
            {
                _marketingTocLink = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Language code of the product</summary>
    [Newtonsoft.Json.JsonProperty(
        "LanguageCode",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LanguageCode
    {
        get { return _languageCode; }
        set
        {
            if (_languageCode != value)
            {
                _languageCode = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>List of autosuggest keywords/phrases, comma separated</summary>
    [Newtonsoft.Json.JsonProperty(
        "MetaKeywords",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.ObjectModel.ObservableCollection<string> MetaKeywords
    {
        get { return _metaKeywords; }
        set
        {
            if (_metaKeywords != value)
            {
                _metaKeywords = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The number of pages in the product. Must be non-negative, but can be null</summary>
    [Newtonsoft.Json.JsonProperty(
        "PageCount",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? PageCount
    {
        get { return _pageCount; }
        set
        {
            if (_pageCount != value)
            {
                _pageCount = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Username of the last user to have updated the product</summary>
    [Newtonsoft.Json.JsonProperty(
        "LastUpdatedBy",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LastUpdatedBy
    {
        get { return _lastUpdatedBy; }
        set
        {
            if (_lastUpdatedBy != value)
            {
                _lastUpdatedBy = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Date and time of when content has been imported to product</summary>
    [Newtonsoft.Json.JsonProperty(
        "ContentImportedOn",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTime? ContentImportedOn
    {
        get { return _contentImportedOn; }
        set
        {
            if (_contentImportedOn != value)
            {
                _contentImportedOn = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Legacy field please ignore</summary>
    [Newtonsoft.Json.JsonProperty(
        "ExtraTextfield",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ExtraTextfield
    {
        get { return _extraTextfield; }
        set
        {
            if (_extraTextfield != value)
            {
                _extraTextfield = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Date and time of when the content has been updated in product</summary>
    [Newtonsoft.Json.JsonProperty(
        "ContentUpdatedOn",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTime? ContentUpdatedOn
    {
        get { return _contentUpdatedOn; }
        set
        {
            if (_contentUpdatedOn != value)
            {
                _contentUpdatedOn = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>News chapter title of news feeds in the toc of the product.</summary>
    [Newtonsoft.Json.JsonProperty(
        "NewsTitle",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string NewsTitle
    {
        get { return _newsTitle; }
        set
        {
            if (_newsTitle != value)
            {
                _newsTitle = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Optional metadata that can be stored with the product.
    /// 
    /// This property should be treated as a dictionary of string:string, e.g.
    /// ```
    /// {
    ///   ...
    ///   "LanguageCode": "en",
    ///   ...
    ///   "ThirdPartyMetadata": 
    ///   {
    ///     "CustomField": "CustomValue"
    ///   }
    /// }
    /// ```
    /// </summary>
    [Newtonsoft.Json.JsonProperty(
        "ThirdPartyMetadata",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object ThirdPartyMetadata
    {
        get { return _thirdPartyMetadata; }
        set
        {
            if (_thirdPartyMetadata != value)
            {
                _thirdPartyMetadata = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ProductExtendedMetadataModel FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductExtendedMetadataModel>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class ProductExtendedMetadataForm : System.ComponentModel.INotifyPropertyChanged
{
    private string _marketingLink;
    private string _marketingTocLink;
    private string _languageCode;
    private System.Collections.ObjectModel.ObservableCollection<string> _metaKeywords;
    private int? _pageCount;
    private string _extraTextfield;
    private string _newsTitle;
    private object _thirdPartyMetadata;

    /// <summary>Markerting Url to provide users extra source of information. If a marketing brochure file is present, this link will not be displayed</summary>
    [Newtonsoft.Json.JsonProperty(
        "MarketingLink",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string MarketingLink
    {
        get { return _marketingLink; }
        set
        {
            if (_marketingLink != value)
            {
                _marketingLink = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Marketing Toc Url to an alternative Toc, perhaps containing more detail</summary>
    [Newtonsoft.Json.JsonProperty(
        "MarketingTocLink",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string MarketingTocLink
    {
        get { return _marketingTocLink; }
        set
        {
            if (_marketingTocLink != value)
            {
                _marketingTocLink = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Language code of the product</summary>
    [Newtonsoft.Json.JsonProperty(
        "LanguageCode",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LanguageCode
    {
        get { return _languageCode; }
        set
        {
            if (_languageCode != value)
            {
                _languageCode = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>List of autosuggest keywords/phrases, comma separated</summary>
    [Newtonsoft.Json.JsonProperty(
        "MetaKeywords",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.ObjectModel.ObservableCollection<string> MetaKeywords
    {
        get { return _metaKeywords; }
        set
        {
            if (_metaKeywords != value)
            {
                _metaKeywords = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The number of pages in the product. Must be non-negative, but can be null</summary>
    [Newtonsoft.Json.JsonProperty(
        "PageCount",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? PageCount
    {
        get { return _pageCount; }
        set
        {
            if (_pageCount != value)
            {
                _pageCount = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Legacy field please ignore</summary>
    [Newtonsoft.Json.JsonProperty(
        "ExtraTextfield",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ExtraTextfield
    {
        get { return _extraTextfield; }
        set
        {
            if (_extraTextfield != value)
            {
                _extraTextfield = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>News chapter title of news feeds in the toc of the product.</summary>
    [Newtonsoft.Json.JsonProperty(
        "NewsTitle",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string NewsTitle
    {
        get { return _newsTitle; }
        set
        {
            if (_newsTitle != value)
            {
                _newsTitle = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Optional metadata that can be stored with the product.
    /// 
    /// This property should be treated as a dictionary of string:string, e.g.
    /// ```
    /// {
    ///   ...
    ///   "LanguageCode": "en",
    ///   ...
    ///   "ThirdPartyMetadata": 
    ///   {
    ///     "CustomField": "CustomValue"
    ///   }
    /// }
    /// ```
    /// </summary>
    [Newtonsoft.Json.JsonProperty(
        "ThirdPartyMetadata",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object ThirdPartyMetadata
    {
        get { return _thirdPartyMetadata; }
        set
        {
            if (_thirdPartyMetadata != value)
            {
                _thirdPartyMetadata = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ProductExtendedMetadataForm FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductExtendedMetadataForm>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class ProductExtendedMetadataCommand : System.ComponentModel.INotifyPropertyChanged
{
    private ProductExtendedMetadataCommandOp _op;
    private string _path;
    private object _value;

    /// <summary>The operation to perform to the metadata identified with "path".
    /// 
    /// If "Add" then the metadata will be created or updated with the value specified.
    /// 
    /// If "Delete" then the metadata will be deleted, if it exists.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Op", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ProductExtendedMetadataCommandOp Op
    {
        get { return _op; }
        set
        {
            if (_op != value)
            {
                _op = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The name of the metadata to modify. Must begin with a forward slash.
    /// 
    /// See the PUT method to view the names and validation details for each metadata item.
    /// 
    /// **Paths are case sensitive**, and usually start with a capital letter (even if the json states it is lowercase)
    /// 
    /// Third Party Metadata paths should be prefixed with "/ThirdPartyMetadata/". If the custom metadata field contains a forward slash, it should be escaped by replacing it with two forward slashes.
    /// 
    /// e.g. `/ThirdPartyMetadata/Custom//Field` will reference the `Custom/Field` metadata.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Path", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public string Path
    {
        get { return _path; }
        set
        {
            if (_path != value)
            {
                _path = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>See the PUT method to view the valid values.</summary>
    [Newtonsoft.Json.JsonProperty(
        "Value",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Value
    {
        get { return _value; }
        set
        {
            if (_value != value)
            {
                _value = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ProductExtendedMetadataCommand FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductExtendedMetadataCommand>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class CategoryModel : System.ComponentModel.INotifyPropertyChanged
{
    private string _id;
    private string _parentId;
    private string _code;
    private string _name;
    private bool? _isHidden = false;
    private System.Collections.ObjectModel.ObservableCollection<string> _childIds;
    private System.Collections.ObjectModel.ObservableCollection<CategoryModel> _children;

    /// <summary>The unique identifier of the category.</summary>
    [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public string Id
    {
        get { return _id; }
        set
        {
            if (_id != value)
            {
                _id = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The id of the parent of this category. Null for a top level category.</summary>
    [Newtonsoft.Json.JsonProperty(
        "ParentId",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ParentId
    {
        get { return _parentId; }
        set
        {
            if (_parentId != value)
            {
                _parentId = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The optional code used to identify the category</summary>
    [Newtonsoft.Json.JsonProperty(
        "Code",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Code
    {
        get { return _code; }
        set
        {
            if (_code != value)
            {
                _code = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The display name of the category</summary>
    [Newtonsoft.Json.JsonProperty(
        "Name",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name
    {
        get { return _name; }
        set
        {
            if (_name != value)
            {
                _name = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Whether the category is visible or not</summary>
    [Newtonsoft.Json.JsonProperty(
        "IsHidden",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsHidden
    {
        get { return _isHidden; }
        set
        {
            if (_isHidden != value)
            {
                _isHidden = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The ids of the children belonging to this category. Replaced by Children when "Include descendants" is true</summary>
    [Newtonsoft.Json.JsonProperty(
        "ChildIds",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.ObjectModel.ObservableCollection<string> ChildIds
    {
        get { return _childIds; }
        set
        {
            if (_childIds != value)
            {
                _childIds = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The children of this category. Only included when "Include descendants" is true</summary>
    [Newtonsoft.Json.JsonProperty(
        "Children",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.ObjectModel.ObservableCollection<CategoryModel> Children
    {
        get { return _children; }
        set
        {
            if (_children != value)
            {
                _children = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CategoryModel FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<CategoryModel>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class ProductAuthorForm : System.ComponentModel.INotifyPropertyChanged
{
    private string _name;
    private string _username;

    /// <summary>The name of the author, suitable for displaying. Must be less than 200 characters</summary>
    [Newtonsoft.Json.JsonProperty(
        "Name",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name
    {
        get { return _name; }
        set
        {
            if (_name != value)
            {
                _name = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The username of the author, if the author is also a user on the system. Only available for users in role 'ReportAdmin'.</summary>
    [Newtonsoft.Json.JsonProperty(
        "Username",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Username
    {
        get { return _username; }
        set
        {
            if (_username != value)
            {
                _username = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ProductAuthorForm FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductAuthorForm>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class ProductTocModel : System.ComponentModel.INotifyPropertyChanged
{
    private List<ProductTocEntryModel> _chapters;
    private List<ProductTocEntryModel> _attachments;

    [Newtonsoft.Json.JsonProperty(
        "Chapters",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public List<ProductTocEntryModel> Chapters
    {
        get { return _chapters; }
        set
        {
            if (_chapters != value)
            {
                _chapters = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "Attachments",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public List<ProductTocEntryModel> Attachments
    {
        get { return _attachments; }
        set
        {
            if (_attachments != value)
            {
                _attachments = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ProductTocModel FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductTocModel>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class ProductTocEntryModel : System.ComponentModel.INotifyPropertyChanged
{
    private string _summary;
    private System.Collections.ObjectModel.ObservableCollection<ProductTocEntryModel> _contents;

    /// <summary>The summary (display name) of the entry</summary>
    [Newtonsoft.Json.JsonProperty(
        "Summary",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Summary
    {
        get { return _summary; }
        set
        {
            if (_summary != value)
            {
                _summary = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The contents of the current entry which are visible to the the current user.
    /// Generally, entries will recurse to 3 or 4 levels deep
    /// 
    /// Warning: This property can be null, in order to reduce the amount of data being transferred.
    /// </summary>
    [Newtonsoft.Json.JsonProperty(
        "Contents",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.ObjectModel.ObservableCollection<ProductTocEntryModel> Contents
    {
        get { return _contents; }
        set
        {
            if (_contents != value)
            {
                _contents = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ProductTocEntryModel FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductTocEntryModel>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class NewsItemSearchResult : System.ComponentModel.INotifyPropertyChanged
{
    private int? _itemCount;
    private System.Collections.ObjectModel.ObservableCollection<NewsItemDataModel> _items;

    /// <summary>The total number of items matching the search, before paging is applied.</summary>
    [Newtonsoft.Json.JsonProperty(
        "ItemCount",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? ItemCount
    {
        get { return _itemCount; }
        set
        {
            if (_itemCount != value)
            {
                _itemCount = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "Items",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.ObjectModel.ObservableCollection<NewsItemDataModel> Items
    {
        get { return _items; }
        set
        {
            if (_items != value)
            {
                _items = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static NewsItemSearchResult FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<NewsItemSearchResult>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class NewsItemDataModel : System.ComponentModel.INotifyPropertyChanged
{
    private int? _id;
    private string _title;
    private string _link;
    private string _description;
    private System.DateTime? _date;
    private string _author;
    private string _source;
    private string _sourceUrl;
    private string _guid;
    private string _enclosureUrl;
    private int? _enclosureLength;
    private string _enclosureType;
    private string _commentsUrl;
    private System.Collections.ObjectModel.ObservableCollection<RssCategoryDataModel> _categories;
    private System.Collections.ObjectModel.ObservableCollection<NewsItemReferenceDataModel> _references;
    private bool? _isFeatured;

    /// <summary>The unique id of the news item</summary>
    [Newtonsoft.Json.JsonProperty(
        "Id",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Id
    {
        get { return _id; }
        set
        {
            if (_id != value)
            {
                _id = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "Title",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title
    {
        get { return _title; }
        set
        {
            if (_title != value)
            {
                _title = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "Link",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Link
    {
        get { return _link; }
        set
        {
            if (_link != value)
            {
                _link = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The description/content of the news item. Can contain HTML</summary>
    [Newtonsoft.Json.JsonProperty(
        "Description",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Description
    {
        get { return _description; }
        set
        {
            if (_description != value)
            {
                _description = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "Date",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTime? Date
    {
        get { return _date; }
        set
        {
            if (_date != value)
            {
                _date = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "Author",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Author
    {
        get { return _author; }
        set
        {
            if (_author != value)
            {
                _author = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "Source",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Source
    {
        get { return _source; }
        set
        {
            if (_source != value)
            {
                _source = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "SourceUrl",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string SourceUrl
    {
        get { return _sourceUrl; }
        set
        {
            if (_sourceUrl != value)
            {
                _sourceUrl = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "Guid",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Guid
    {
        get { return _guid; }
        set
        {
            if (_guid != value)
            {
                _guid = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "EnclosureUrl",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string EnclosureUrl
    {
        get { return _enclosureUrl; }
        set
        {
            if (_enclosureUrl != value)
            {
                _enclosureUrl = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "EnclosureLength",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? EnclosureLength
    {
        get { return _enclosureLength; }
        set
        {
            if (_enclosureLength != value)
            {
                _enclosureLength = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "EnclosureType",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string EnclosureType
    {
        get { return _enclosureType; }
        set
        {
            if (_enclosureType != value)
            {
                _enclosureType = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "CommentsUrl",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CommentsUrl
    {
        get { return _commentsUrl; }
        set
        {
            if (_commentsUrl != value)
            {
                _commentsUrl = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "Categories",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.ObjectModel.ObservableCollection<RssCategoryDataModel> Categories
    {
        get { return _categories; }
        set
        {
            if (_categories != value)
            {
                _categories = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "References",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.ObjectModel.ObservableCollection<NewsItemReferenceDataModel> References
    {
        get { return _references; }
        set
        {
            if (_references != value)
            {
                _references = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>News items can optionally be marked as 'featured', and can be displayed seperately in news widgets or emails.</summary>
    [Newtonsoft.Json.JsonProperty(
        "IsFeatured",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsFeatured
    {
        get { return _isFeatured; }
        set
        {
            if (_isFeatured != value)
            {
                _isFeatured = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static NewsItemDataModel FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<NewsItemDataModel>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class RssCategoryDataModel : System.ComponentModel.INotifyPropertyChanged
{
    private string _categoryPath;
    private string _domain;

    [Newtonsoft.Json.JsonProperty("CategoryPath", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public string CategoryPath
    {
        get { return _categoryPath; }
        set
        {
            if (_categoryPath != value)
            {
                _categoryPath = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "Domain",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Domain
    {
        get { return _domain; }
        set
        {
            if (_domain != value)
            {
                _domain = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static RssCategoryDataModel FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<RssCategoryDataModel>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class NewsItemReferenceDataModel : System.ComponentModel.INotifyPropertyChanged
{
    private string _name;
    private string _url;

    [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public string Name
    {
        get { return _name; }
        set
        {
            if (_name != value)
            {
                _name = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Must be a valid, absolute URI</summary>
    [Newtonsoft.Json.JsonProperty(
        "Url",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Url
    {
        get { return _url; }
        set
        {
            if (_url != value)
            {
                _url = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static NewsItemReferenceDataModel FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<NewsItemReferenceDataModel>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class SubscriberDataModel : System.ComponentModel.INotifyPropertyChanged
{
    private string _username;
    private string _name;
    private string _email;
    private string _phone;
    private string _jobTitle;
    private string _department;
    private string _accountName;
    private bool? _isEnabled;
    private string _company;
    private string _countryCode;
    private string _languageCode;

    [Newtonsoft.Json.JsonProperty(
        "Username",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Username
    {
        get { return _username; }
        set
        {
            if (_username != value)
            {
                _username = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "Name",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name
    {
        get { return _name; }
        set
        {
            if (_name != value)
            {
                _name = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "Email",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Email
    {
        get { return _email; }
        set
        {
            if (_email != value)
            {
                _email = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "Phone",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Phone
    {
        get { return _phone; }
        set
        {
            if (_phone != value)
            {
                _phone = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "JobTitle",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string JobTitle
    {
        get { return _jobTitle; }
        set
        {
            if (_jobTitle != value)
            {
                _jobTitle = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "Department",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Department
    {
        get { return _department; }
        set
        {
            if (_department != value)
            {
                _department = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "AccountName",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AccountName
    {
        get { return _accountName; }
        set
        {
            if (_accountName != value)
            {
                _accountName = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "IsEnabled",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsEnabled
    {
        get { return _isEnabled; }
        set
        {
            if (_isEnabled != value)
            {
                _isEnabled = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "Company",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Company
    {
        get { return _company; }
        set
        {
            if (_company != value)
            {
                _company = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "CountryCode",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CountryCode
    {
        get { return _countryCode; }
        set
        {
            if (_countryCode != value)
            {
                _countryCode = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "LanguageCode",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LanguageCode
    {
        get { return _languageCode; }
        set
        {
            if (_languageCode != value)
            {
                _languageCode = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SubscriberDataModel FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<SubscriberDataModel>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class SubscriberDataForm : System.ComponentModel.INotifyPropertyChanged
{
    private string _name;
    private string _email;
    private string _phone;
    private string _jobTitle;
    private string _department;
    private string _accountName;
    private bool? _isEnabled;
    private string _company;
    private string _countryCode;
    private string _languageCode;
    private bool? _sendWelcomeEmail;

    [Newtonsoft.Json.JsonProperty(
        "Name",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name
    {
        get { return _name; }
        set
        {
            if (_name != value)
            {
                _name = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public string Email
    {
        get { return _email; }
        set
        {
            if (_email != value)
            {
                _email = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "Phone",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Phone
    {
        get { return _phone; }
        set
        {
            if (_phone != value)
            {
                _phone = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "JobTitle",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string JobTitle
    {
        get { return _jobTitle; }
        set
        {
            if (_jobTitle != value)
            {
                _jobTitle = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "Department",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Department
    {
        get { return _department; }
        set
        {
            if (_department != value)
            {
                _department = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Moves user to specified account. If null then user stays in current location. If user is moved then all 
    /// comments made by that user are deleted. The user will lose access to licenses they inherited from the 
    /// old account.
    /// </summary>
    [Newtonsoft.Json.JsonProperty(
        "AccountName",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AccountName
    {
        get { return _accountName; }
        set
        {
            if (_accountName != value)
            {
                _accountName = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "IsEnabled",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsEnabled
    {
        get { return _isEnabled; }
        set
        {
            if (_isEnabled != value)
            {
                _isEnabled = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "Company",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Company
    {
        get { return _company; }
        set
        {
            if (_company != value)
            {
                _company = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "CountryCode",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string CountryCode
    {
        get { return _countryCode; }
        set
        {
            if (_countryCode != value)
            {
                _countryCode = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "LanguageCode",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LanguageCode
    {
        get { return _languageCode; }
        set
        {
            if (_languageCode != value)
            {
                _languageCode = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>For newly created subscribers specifies whether to send them a welcome email containing a temporary password.
    /// Must be false for existing subscribers.
    /// </summary>
    [Newtonsoft.Json.JsonProperty(
        "SendWelcomeEmail",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? SendWelcomeEmail
    {
        get { return _sendWelcomeEmail; }
        set
        {
            if (_sendWelcomeEmail != value)
            {
                _sendWelcomeEmail = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SubscriberDataForm FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<SubscriberDataForm>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class CreateUserLicenseForm : System.ComponentModel.INotifyPropertyChanged
{
    private string _report;
    private LicenseDateRangeForm _activeDates;
    private bool? _allowAllAttachmentExtensions;
    private System.Collections.ObjectModel.ObservableCollection<string> _allowedAttachmentExtensions;
    private CreateUserLicenseFormNewsSubscriptions? _newsSubscriptions;
    private bool? _sendConfirmationEmail;
    private bool? _licenseDataProducts;

    /// <summary>The report code of the report to add the license to.</summary>
    [Newtonsoft.Json.JsonProperty("Report", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public string Report
    {
        get { return _report; }
        set
        {
            if (_report != value)
            {
                _report = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "ActiveDates",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public LicenseDateRangeForm ActiveDates
    {
        get { return _activeDates; }
        set
        {
            if (_activeDates != value)
            {
                _activeDates = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "AllowAllAttachmentExtensions",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? AllowAllAttachmentExtensions
    {
        get { return _allowAllAttachmentExtensions; }
        set
        {
            if (_allowAllAttachmentExtensions != value)
            {
                _allowAllAttachmentExtensions = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>A list of space separated attachment extensions (not starting with a '.') that are allowed to be downloaded. If AllowAllAttachmentExtensions is true then it should be null, if AllowAllAttachmentExtensions is false then it should not be null
    /// </summary>
    [Newtonsoft.Json.JsonProperty(
        "AllowedAttachmentExtensions",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.ObjectModel.ObservableCollection<string> AllowedAttachmentExtensions
    {
        get { return _allowedAttachmentExtensions; }
        set
        {
            if (_allowedAttachmentExtensions != value)
            {
                _allowedAttachmentExtensions = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>If not set no news subscriptions will be added.</summary>
    [Newtonsoft.Json.JsonProperty(
        "NewsSubscriptions",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public CreateUserLicenseFormNewsSubscriptions? NewsSubscriptions
    {
        get { return _newsSubscriptions; }
        set
        {
            if (_newsSubscriptions != value)
            {
                _newsSubscriptions = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "SendConfirmationEmail",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? SendConfirmationEmail
    {
        get { return _sendConfirmationEmail; }
        set
        {
            if (_sendConfirmationEmail != value)
            {
                _sendConfirmationEmail = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>When true will add a license to all underlying data products of embedded exhibits, allowing end users to interact with them.</summary>
    [Newtonsoft.Json.JsonProperty(
        "LicenseDataProducts",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? LicenseDataProducts
    {
        get { return _licenseDataProducts; }
        set
        {
            if (_licenseDataProducts != value)
            {
                _licenseDataProducts = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CreateUserLicenseForm FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateUserLicenseForm>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class LicenseDateRangeForm : System.ComponentModel.INotifyPropertyChanged
{
    private System.DateTime? _startDate;
    private System.DateTime? _endDate;

    /// <summary>The license will be active on and after this date-time.</summary>
    [Newtonsoft.Json.JsonProperty(
        "StartDate",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTime? StartDate
    {
        get { return _startDate; }
        set
        {
            if (_startDate != value)
            {
                _startDate = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The license will be active up to this date-time.</summary>
    [Newtonsoft.Json.JsonProperty(
        "EndDate",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.DateTime? EndDate
    {
        get { return _endDate; }
        set
        {
            if (_endDate != value)
            {
                _endDate = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static LicenseDateRangeForm FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<LicenseDateRangeForm>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class ExternalProductLinkForm : System.ComponentModel.INotifyPropertyChanged
{
    private string _displayUrl;
    private string _loginUrl;
    private bool? _loginIsPost;
    private ExternalProductLinkFormAutoSubmitMode? _autoSubmitMode;
    private System.Collections.ObjectModel.ObservableCollection<ExternalProductLinkParameterModel> _parameters;

    /// <summary>The URL displayed to the user.</summary>
    [Newtonsoft.Json.JsonProperty(
        "DisplayUrl",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DisplayUrl
    {
        get { return _displayUrl; }
        set
        {
            if (_displayUrl != value)
            {
                _displayUrl = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The actual URL used (should start with either http:// or https://).</summary>
    [Newtonsoft.Json.JsonProperty(
        "LoginUrl",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string LoginUrl
    {
        get { return _loginUrl; }
        set
        {
            if (_loginUrl != value)
            {
                _loginUrl = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>If set to false the request type will be HTTP GET and the parameters will form the query string. If set to true the request type will be HTTP POST and the paramters will form the request body.    
    /// </summary>
    [Newtonsoft.Json.JsonProperty(
        "LoginIsPost",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? LoginIsPost
    {
        get { return _loginIsPost; }
        set
        {
            if (_loginIsPost != value)
            {
                _loginIsPost = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>If set to 'AutoHideTabs' the link will automatically open in an iframe in the page (with report tabs hidden) as soon as the report is accessed. If set to 'AutoShowTabs' the link will open automatically, when the report is accessed, in an iframe in the page. If set to 'ManualPopup' when the access button is clicked the link will open in an iframe in lightbox. If set to 'ManualNewTab' when the access button is clicked the link will open in a new tab.      
    /// </summary>
    [Newtonsoft.Json.JsonProperty(
        "AutoSubmitMode",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ExternalProductLinkFormAutoSubmitMode? AutoSubmitMode
    {
        get { return _autoSubmitMode; }
        set
        {
            if (_autoSubmitMode != value)
            {
                _autoSubmitMode = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "Parameters",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.ObjectModel.ObservableCollection<ExternalProductLinkParameterModel> Parameters
    {
        get { return _parameters; }
        set
        {
            if (_parameters != value)
            {
                _parameters = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ExternalProductLinkForm FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<ExternalProductLinkForm>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class ExternalProductLinkParameterModel : System.ComponentModel.INotifyPropertyChanged
{
    private string _name;
    private string _value;
    private bool? _isVisible;

    /// <summary>Name of the parameter.</summary>
    [Newtonsoft.Json.JsonProperty(
        "Name",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name
    {
        get { return _name; }
        set
        {
            if (_name != value)
            {
                _name = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The value of the parameter.</summary>
    [Newtonsoft.Json.JsonProperty(
        "Value",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Value
    {
        get { return _value; }
        set
        {
            if (_value != value)
            {
                _value = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Whether to display the parameter and its value to the user. It will always be sent when they access the product regardless of this setting.</summary>
    [Newtonsoft.Json.JsonProperty(
        "IsVisible",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsVisible
    {
        get { return _isVisible; }
        set
        {
            if (_isVisible != value)
            {
                _isVisible = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ExternalProductLinkParameterModel FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<ExternalProductLinkParameterModel>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class CreateCategoryLicenseForm : System.ComponentModel.INotifyPropertyChanged
{
    private string _category;
    private LicenseDateRangeForm _activeDates;
    private LicenseDateRangeForm _publicationDates;
    private int? _publicationEmbargo;
    private System.Collections.ObjectModel.ObservableCollection<string> _allowedAttachmentExtensions;
    private bool? _allowAllAttachmentExtensions;
    private CreateCategoryLicenseFormNewsSubscriptions? _newsSubscriptions;

    /// <summary>The category to add the license to (use '-' to separate category and subcategory names e.g. category-subcategory).</summary>
    [Newtonsoft.Json.JsonProperty("Category", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public string Category
    {
        get { return _category; }
        set
        {
            if (_category != value)
            {
                _category = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "ActiveDates",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public LicenseDateRangeForm ActiveDates
    {
        get { return _activeDates; }
        set
        {
            if (_activeDates != value)
            {
                _activeDates = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>If set, the user will only gain access to reports with publication dates within this range.</summary>
    [Newtonsoft.Json.JsonProperty(
        "PublicationDates",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public LicenseDateRangeForm PublicationDates
    {
        get { return _publicationDates; }
        set
        {
            if (_publicationDates != value)
            {
                _publicationDates = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The number of days after a reports publication date that the user will gain access.</summary>
    [Newtonsoft.Json.JsonProperty(
        "PublicationEmbargo",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? PublicationEmbargo
    {
        get { return _publicationEmbargo; }
        set
        {
            if (_publicationEmbargo != value)
            {
                _publicationEmbargo = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>A list of space-separated attachment extensions (not starting with a '.') that are allowed to be downloaded. If AllowAllAttachmentExtensions is true then it should be null, if AllowAllAttachmentExtensions is false then it should not be null.
    /// </summary>
    [Newtonsoft.Json.JsonProperty(
        "AllowedAttachmentExtensions",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.ObjectModel.ObservableCollection<string> AllowedAttachmentExtensions
    {
        get { return _allowedAttachmentExtensions; }
        set
        {
            if (_allowedAttachmentExtensions != value)
            {
                _allowedAttachmentExtensions = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Whether to allow all attachments to be downloaded.</summary>
    [Newtonsoft.Json.JsonProperty(
        "AllowAllAttachmentExtensions",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? AllowAllAttachmentExtensions
    {
        get { return _allowAllAttachmentExtensions; }
        set
        {
            if (_allowAllAttachmentExtensions != value)
            {
                _allowAllAttachmentExtensions = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>If not set no news subscriptions will be added.</summary>
    [Newtonsoft.Json.JsonProperty(
        "NewsSubscriptions",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public CreateCategoryLicenseFormNewsSubscriptions? NewsSubscriptions
    {
        get { return _newsSubscriptions; }
        set
        {
            if (_newsSubscriptions != value)
            {
                _newsSubscriptions = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CreateCategoryLicenseForm FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateCategoryLicenseForm>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class ProductBuyItNowDataModel : System.ComponentModel.INotifyPropertyChanged
{
    private string _buyItNowLink;
    private bool? _isEnabled;

    [Newtonsoft.Json.JsonProperty(
        "BuyItNowLink",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string BuyItNowLink
    {
        get { return _buyItNowLink; }
        set
        {
            if (_buyItNowLink != value)
            {
                _buyItNowLink = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "IsEnabled",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsEnabled
    {
        get { return _isEnabled; }
        set
        {
            if (_isEnabled != value)
            {
                _isEnabled = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ProductBuyItNowDataModel FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductBuyItNowDataModel>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class ProductLinkModel : System.ComponentModel.INotifyPropertyChanged
{
    private int? _id;
    private string _name;

    [Newtonsoft.Json.JsonProperty(
        "Id",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Id
    {
        get { return _id; }
        set
        {
            if (_id != value)
            {
                _id = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "Name",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name
    {
        get { return _name; }
        set
        {
            if (_name != value)
            {
                _name = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ProductLinkModel FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductLinkModel>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class ProductLinkDetailsModel : System.ComponentModel.INotifyPropertyChanged
{
    private int? _id;
    private string _name;
    private ProductLinkDetailsModelType? _type;
    private System.Collections.ObjectModel.ObservableCollection<string> _linkedReportCodes;

    [Newtonsoft.Json.JsonProperty(
        "Id",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Id
    {
        get { return _id; }
        set
        {
            if (_id != value)
            {
                _id = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "Name",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name
    {
        get { return _name; }
        set
        {
            if (_name != value)
            {
                _name = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "Type",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ProductLinkDetailsModelType? Type
    {
        get { return _type; }
        set
        {
            if (_type != value)
            {
                _type = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "LinkedReportCodes",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.ObjectModel.ObservableCollection<string> LinkedReportCodes
    {
        get { return _linkedReportCodes; }
        set
        {
            if (_linkedReportCodes != value)
            {
                _linkedReportCodes = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ProductLinkDetailsModel FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductLinkDetailsModel>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class ProductLinkDetailsForm : System.ComponentModel.INotifyPropertyChanged
{
    private string _name;
    private ProductLinkDetailsFormType _type;

    private System.Collections.ObjectModel.ObservableCollection<string> _linkedReportCodes =
        new System.Collections.ObjectModel.ObservableCollection<string>();

    [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public string Name
    {
        get { return _name; }
        set
        {
            if (_name != value)
            {
                _name = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ProductLinkDetailsFormType Type
    {
        get { return _type; }
        set
        {
            if (_type != value)
            {
                _type = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty("LinkedReportCodes", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.ObjectModel.ObservableCollection<string> LinkedReportCodes
    {
        get { return _linkedReportCodes; }
        set
        {
            if (_linkedReportCodes != value)
            {
                _linkedReportCodes = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ProductLinkDetailsForm FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductLinkDetailsForm>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class FileDownloadModel : System.ComponentModel.INotifyPropertyChanged
{
    private string _name;
    private int? _fileSize;
    private byte[] _content;

    [Newtonsoft.Json.JsonProperty(
        "Name",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name
    {
        get { return _name; }
        set
        {
            if (_name != value)
            {
                _name = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "FileSize",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? FileSize
    {
        get { return _fileSize; }
        set
        {
            if (_fileSize != value)
            {
                _fileSize = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>In JSON format this will be a base 64 encoded string but we recommend using BSON format for this request.</summary>
    [Newtonsoft.Json.JsonProperty(
        "Content",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public byte[] Content
    {
        get { return _content; }
        set
        {
            if (_content != value)
            {
                _content = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static FileDownloadModel FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<FileDownloadModel>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class ProductContentModel : System.ComponentModel.INotifyPropertyChanged
{
    private string _type;
    private FileDownloadModel _content;

    /// <summary>This should be used to establish how the content is read</summary>
    [Newtonsoft.Json.JsonProperty(
        "Type",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type
    {
        get { return _type; }
        set
        {
            if (_type != value)
            {
                _type = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "Content",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public FileDownloadModel Content
    {
        get { return _content; }
        set
        {
            if (_content != value)
            {
                _content = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ProductContentModel FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductContentModel>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class MarketingBrochureForm : System.ComponentModel.INotifyPropertyChanged
{
    private System.Collections.ObjectModel.ObservableCollection<object> _content =
        new System.Collections.ObjectModel.ObservableCollection<object>();

    private string _displayName;

    [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.ObjectModel.ObservableCollection<object> Content
    {
        get { return _content; }
        set
        {
            if (_content != value)
            {
                _content = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The display name (including the extension) of the file to upload</summary>
    [Newtonsoft.Json.JsonProperty(
        "DisplayName",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DisplayName
    {
        get { return _displayName; }
        set
        {
            if (_displayName != value)
            {
                _displayName = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static MarketingBrochureForm FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<MarketingBrochureForm>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class MarketingBrochureModel : System.ComponentModel.INotifyPropertyChanged
{
    private string _url;
    private string _displayName;
    private string _size;

    /// <summary>The temporary url to download the brochure</summary>
    [Newtonsoft.Json.JsonProperty(
        "Url",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Url
    {
        get { return _url; }
        set
        {
            if (_url != value)
            {
                _url = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The display name of the brochure</summary>
    [Newtonsoft.Json.JsonProperty(
        "DisplayName",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string DisplayName
    {
        get { return _displayName; }
        set
        {
            if (_displayName != value)
            {
                _displayName = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The size of the brochure in bytes</summary>
    [Newtonsoft.Json.JsonProperty(
        "Size",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Size
    {
        get { return _size; }
        set
        {
            if (_size != value)
            {
                _size = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static MarketingBrochureModel FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<MarketingBrochureModel>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class CategoryDataForm : System.ComponentModel.INotifyPropertyChanged
{
    private string _name;
    private string _parentId;
    private bool? _isHidden;
    private string _code;

    /// <summary>The name of the category</summary>
    [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public string Name
    {
        get { return _name; }
        set
        {
            if (_name != value)
            {
                _name = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The id of the parent (if not set then it will be a top level category)</summary>
    [Newtonsoft.Json.JsonProperty(
        "ParentId",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ParentId
    {
        get { return _parentId; }
        set
        {
            if (_parentId != value)
            {
                _parentId = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Whether the category is only visible to report admins</summary>
    [Newtonsoft.Json.JsonProperty(
        "IsHidden",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsHidden
    {
        get { return _isHidden; }
        set
        {
            if (_isHidden != value)
            {
                _isHidden = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The optional code used to identify the category (must be unique)</summary>
    [Newtonsoft.Json.JsonProperty(
        "Code",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Code
    {
        get { return _code; }
        set
        {
            if (_code != value)
            {
                _code = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CategoryDataForm FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<CategoryDataForm>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class ProductSearchParametersForm : System.ComponentModel.INotifyPropertyChanged
{
    private string _terms;
    private System.Collections.ObjectModel.ObservableCollection<string> _categoryPaths;
    private string _orderBy;
    private bool? _includeUnlicensed = false;
    private bool? _includePrivate = true;
    private bool? _includeComingSoon = true;
    private bool? _includeArchived = true;
    private string _maxAge;
    private System.Collections.ObjectModel.ObservableCollection<Anonymous> _productTypes;

    /// <summary>The terms/words to search for within product content and metadata. Can contain logical operators e.g. AND, OR</summary>
    [Newtonsoft.Json.JsonProperty(
        "Terms",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Terms
    {
        get { return _terms; }
        set
        {
            if (_terms != value)
            {
                _terms = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>When provided, filters the returned products to only include the products in the categories by category path. When two categories are under the same top-level category, products in either category are returned ("OR"). When two categories are in different top-level categories, only products which are in both categories are returned ("AND")</summary>
    [Newtonsoft.Json.JsonProperty(
        "CategoryPaths",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.ObjectModel.ObservableCollection<string> CategoryPaths
    {
        get { return _categoryPaths; }
        set
        {
            if (_categoryPaths != value)
            {
                _categoryPaths = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Specifies the order in which the products should be returned, as a comma-seperated string of fields. The field can be 'Title', 'Published', followed by '.asc', '.desc'. These options can be changed by contacting support.</summary>
    [Newtonsoft.Json.JsonProperty(
        "OrderBy",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string OrderBy
    {
        get { return _orderBy; }
        set
        {
            if (_orderBy != value)
            {
                _orderBy = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Whether to include products which are not licensed to the current user</summary>
    [Newtonsoft.Json.JsonProperty(
        "IncludeUnlicensed",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IncludeUnlicensed
    {
        get { return _includeUnlicensed; }
        set
        {
            if (_includeUnlicensed != value)
            {
                _includeUnlicensed = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Whether to include private products in the results, which the current user has a license to</summary>
    [Newtonsoft.Json.JsonProperty(
        "IncludePrivate",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IncludePrivate
    {
        get { return _includePrivate; }
        set
        {
            if (_includePrivate != value)
            {
                _includePrivate = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Whether to include coming soon products in the results</summary>
    [Newtonsoft.Json.JsonProperty(
        "IncludeComingSoon",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IncludeComingSoon
    {
        get { return _includeComingSoon; }
        set
        {
            if (_includeComingSoon != value)
            {
                _includeComingSoon = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Whether to include archived products in the results</summary>
    [Newtonsoft.Json.JsonProperty(
        "IncludeArchived",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IncludeArchived
    {
        get { return _includeArchived; }
        set
        {
            if (_includeArchived != value)
            {
                _includeArchived = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>When set, results only include reports which are not older than the timespan indicated.
    /// Report age is determined from the published date.
    /// By default the only values that are allowed are ANY, 3Y, 2Y, 1Y or 6M but this can be configured by contacting support.
    /// </summary>
    [Newtonsoft.Json.JsonProperty(
        "MaxAge",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string MaxAge
    {
        get { return _maxAge; }
        set
        {
            if (_maxAge != value)
            {
                _maxAge = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>When set, filters results to only include products of the specified type. When not set, no filtering is applied.</summary>
    [Newtonsoft.Json.JsonProperty(
        "ProductTypes",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
        ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public System.Collections.ObjectModel.ObservableCollection<Anonymous> ProductTypes
    {
        get { return _productTypes; }
        set
        {
            if (_productTypes != value)
            {
                _productTypes = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static ProductSearchParametersForm FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductSearchParametersForm>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class AddSavedSearchForm : System.ComponentModel.INotifyPropertyChanged
{
    private string _title;
    private bool? _isPinnedToHomepage;
    private bool? _isShared;
    private AddSavedSearchFormAlertFrequency? _alertFrequency;
    private ProductSearchParametersForm _searchParameters;

    [Newtonsoft.Json.JsonProperty("Title", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public string Title
    {
        get { return _title; }
        set
        {
            if (_title != value)
            {
                _title = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "IsPinnedToHomepage",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsPinnedToHomepage
    {
        get { return _isPinnedToHomepage; }
        set
        {
            if (_isPinnedToHomepage != value)
            {
                _isPinnedToHomepage = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "IsShared",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsShared
    {
        get { return _isShared; }
        set
        {
            if (_isShared != value)
            {
                _isShared = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "AlertFrequency",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public AddSavedSearchFormAlertFrequency? AlertFrequency
    {
        get { return _alertFrequency; }
        set
        {
            if (_alertFrequency != value)
            {
                _alertFrequency = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty("SearchParameters", Required = Newtonsoft.Json.Required.Always)]
    public ProductSearchParametersForm SearchParameters
    {
        get { return _searchParameters; }
        set
        {
            if (_searchParameters != value)
            {
                _searchParameters = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static AddSavedSearchForm FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<AddSavedSearchForm>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class SavedSearchListModel : System.ComponentModel.INotifyPropertyChanged
{
    private int _id;
    private string _title;
    private bool? _isPinnedToHomepage;
    private bool? _isShared;
    private SavedSearchListModelAlertFrequency? _alertFrequency;

    [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
    public int Id
    {
        get { return _id; }
        set
        {
            if (_id != value)
            {
                _id = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty("Title", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public string Title
    {
        get { return _title; }
        set
        {
            if (_title != value)
            {
                _title = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "IsPinnedToHomepage",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsPinnedToHomepage
    {
        get { return _isPinnedToHomepage; }
        set
        {
            if (_isPinnedToHomepage != value)
            {
                _isPinnedToHomepage = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "IsShared",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsShared
    {
        get { return _isShared; }
        set
        {
            if (_isShared != value)
            {
                _isShared = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "AlertFrequency",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public SavedSearchListModelAlertFrequency? AlertFrequency
    {
        get { return _alertFrequency; }
        set
        {
            if (_alertFrequency != value)
            {
                _alertFrequency = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SavedSearchListModel FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<SavedSearchListModel>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class SavedSearchModel : System.ComponentModel.INotifyPropertyChanged
{
    private int _id;
    private string _title;
    private bool? _isPinnedToHomepage;
    private bool? _isShared;
    private SavedSearchModelAlertFrequency? _alertFrequency;
    private ProductSearchParametersForm _searchParameters;

    [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
    public int Id
    {
        get { return _id; }
        set
        {
            if (_id != value)
            {
                _id = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty("Title", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public string Title
    {
        get { return _title; }
        set
        {
            if (_title != value)
            {
                _title = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "IsPinnedToHomepage",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsPinnedToHomepage
    {
        get { return _isPinnedToHomepage; }
        set
        {
            if (_isPinnedToHomepage != value)
            {
                _isPinnedToHomepage = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "IsShared",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsShared
    {
        get { return _isShared; }
        set
        {
            if (_isShared != value)
            {
                _isShared = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "AlertFrequency",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public SavedSearchModelAlertFrequency? AlertFrequency
    {
        get { return _alertFrequency; }
        set
        {
            if (_alertFrequency != value)
            {
                _alertFrequency = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty("SearchParameters", Required = Newtonsoft.Json.Required.Always)]
    public ProductSearchParametersForm SearchParameters
    {
        get { return _searchParameters; }
        set
        {
            if (_searchParameters != value)
            {
                _searchParameters = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static SavedSearchModel FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<SavedSearchModel>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class CreatedCategoryModel : System.ComponentModel.INotifyPropertyChanged
{
    private string _id;
    private string _parentId;
    private string _code;
    private string _name;
    private bool? _isHidden = false;

    /// <summary>The unique identifier of the category.</summary>
    [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public string Id
    {
        get { return _id; }
        set
        {
            if (_id != value)
            {
                _id = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The id of the parent of this category. Null for a top level category.</summary>
    [Newtonsoft.Json.JsonProperty(
        "ParentId",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ParentId
    {
        get { return _parentId; }
        set
        {
            if (_parentId != value)
            {
                _parentId = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The optional code used to identify the category</summary>
    [Newtonsoft.Json.JsonProperty(
        "Code",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Code
    {
        get { return _code; }
        set
        {
            if (_code != value)
            {
                _code = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The display name of the category</summary>
    [Newtonsoft.Json.JsonProperty(
        "Name",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name
    {
        get { return _name; }
        set
        {
            if (_name != value)
            {
                _name = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Whether the category is visible or not</summary>
    [Newtonsoft.Json.JsonProperty(
        "IsHidden",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsHidden
    {
        get { return _isHidden; }
        set
        {
            if (_isHidden != value)
            {
                _isHidden = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static CreatedCategoryModel FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<CreatedCategoryModel>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public partial class LicenseModel : System.ComponentModel.INotifyPropertyChanged
{
    private int? _id;
    private string _category;
    private string _report;
    private LicenseDateRangeForm _activeDates;
    private LicenseDateRangeForm _publicationDates;
    private int? _publicationEmbargo;
    private string _allowedAttachments;
    private LicenseModelNewsSubscriptions? _newsSubscriptions;
    private string _username;
    private string _accountName;
    private bool? _isDisabled;

    [Newtonsoft.Json.JsonProperty(
        "Id",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? Id
    {
        get { return _id; }
        set
        {
            if (_id != value)
            {
                _id = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The category id (uses '-' to separate category and subcategory names e.g. category-subcategory).</summary>
    [Newtonsoft.Json.JsonProperty(
        "Category",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Category
    {
        get { return _category; }
        set
        {
            if (_category != value)
            {
                _category = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The report code the license is for.</summary>
    [Newtonsoft.Json.JsonProperty(
        "Report",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Report
    {
        get { return _report; }
        set
        {
            if (_report != value)
            {
                _report = value;
                RaisePropertyChanged();
            }
        }
    }

    [Newtonsoft.Json.JsonProperty(
        "ActiveDates",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public LicenseDateRangeForm ActiveDates
    {
        get { return _activeDates; }
        set
        {
            if (_activeDates != value)
            {
                _activeDates = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>If set, the user will only gain access to reports with publication dates within this range.</summary>
    [Newtonsoft.Json.JsonProperty(
        "PublicationDates",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public LicenseDateRangeForm PublicationDates
    {
        get { return _publicationDates; }
        set
        {
            if (_publicationDates != value)
            {
                _publicationDates = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The number of days after a reports publication date that the user will gain access.</summary>
    [Newtonsoft.Json.JsonProperty(
        "PublicationEmbargo",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int? PublicationEmbargo
    {
        get { return _publicationEmbargo; }
        set
        {
            if (_publicationEmbargo != value)
            {
                _publicationEmbargo = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>A list of space-separated attachment extensions (* if all attachments are allowed).</summary>
    [Newtonsoft.Json.JsonProperty(
        "AllowedAttachments",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AllowedAttachments
    {
        get { return _allowedAttachments; }
        set
        {
            if (_allowedAttachments != value)
            {
                _allowedAttachments = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>If not set no news subscriptions is set.</summary>
    [Newtonsoft.Json.JsonProperty(
        "NewsSubscriptions",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public LicenseModelNewsSubscriptions? NewsSubscriptions
    {
        get { return _newsSubscriptions; }
        set
        {
            if (_newsSubscriptions != value)
            {
                _newsSubscriptions = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The username of the user the license is for (if not set then the license is for an account).</summary>
    [Newtonsoft.Json.JsonProperty(
        "Username",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Username
    {
        get { return _username; }
        set
        {
            if (_username != value)
            {
                _username = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>The account name of the account the license is for.</summary>
    [Newtonsoft.Json.JsonProperty(
        "AccountName",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AccountName
    {
        get { return _accountName; }
        set
        {
            if (_accountName != value)
            {
                _accountName = value;
                RaisePropertyChanged();
            }
        }
    }

    /// <summary>Whether the license has been deleted.</summary>
    [Newtonsoft.Json.JsonProperty(
        "IsDisabled",
        Required = Newtonsoft.Json.Required.Default,
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool? IsDisabled
    {
        get { return _isDisabled; }
        set
        {
            if (_isDisabled != value)
            {
                _isDisabled = value;
                RaisePropertyChanged();
            }
        }
    }

    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    public string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    }

    public static LicenseModel FromJson(string data)
    {
        return Newtonsoft.Json.JsonConvert.DeserializeObject<LicenseModel>(data);
    }

    protected virtual void RaisePropertyChanged(
        [System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
    {
        var handler = PropertyChanged;
        if (handler != null)
            handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    }
}

/// <summary>The direction to sort news items by published date, and then id.</summary>
[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public enum SortDirection
{
    Ascending,
    Descending,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public enum ProductImportDataModelTarget
{
    MainDeliverable,
    Attachment,
    PrintCopy,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public enum ProductUploadStatusDataModelStage
{
    Failed,
    NeedsStyles,
    Processing,
    Complete,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public enum AccountRegistrationCreateFormRegistrationType
{
    NoRegistration,
    AccessCodeOnly,
    AllowAnyone,
    GuestUserButNoRegistration,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public enum AccountAccessSearchResultsRegistrationType
{
    NoRegistration,
    AccessCodeOnly,
    AllowAnyone,
    GuestUserButNoRegistration,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public enum ProductMetadataFormType
{
    Normal,
    PDF,
    External,
    PowerPoint,
    Excel,
    Word,
    NewsFeed,
    Database,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public enum ProductExtendedMetadataCommandOp
{
    Add,
    Delete,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public enum CreateUserLicenseFormNewsSubscriptions
{
    Manual,
    Automatic,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public enum ExternalProductLinkFormAutoSubmitMode
{
    AutoHideTabs,
    AutoShowTabs,
    ManualPopup,
    ManualNewTab,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public enum CreateCategoryLicenseFormNewsSubscriptions
{
    Manual,
    Automatic,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public enum ProductLinkDetailsModelType
{
    Translation,
    External,
    Grouping,
    General,
    Series,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public enum ProductLinkDetailsFormType
{
    Translation,
    External,
    Grouping,
    General,
    Series,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public enum Anonymous
{
    Interactive,
    Pdf,
    External,
    DataProduct,
    PowerPoint,
    Excel,
    Word,
    NewsFeed,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public enum AddSavedSearchFormAlertFrequency
{
    Never,
    Daily,
    Weekly,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public enum SavedSearchListModelAlertFrequency
{
    Never = 0,
    Daily = 1,
    Weekly = 2,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public enum SavedSearchModelAlertFrequency
{
    Never = 0,
    Daily = 1,
    Weekly = 2,

}

[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
public enum LicenseModelNewsSubscriptions
{
    Manual,
    Automatic,

}

[System.CodeDom.Compiler.GeneratedCode("NSwag", "11.2.0.0")]
public class SwaggerException : System.Exception
{
    public string StatusCode { get; private set; }

    public string Response { get; private set; }

    public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers
    {
        get;
        private set;
    }

    public SwaggerException(
        string message,
        string statusCode,
        string response,
        System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers,
        System.Exception innerException)
        : base(message, innerException)
    {
        StatusCode = statusCode;
        Response = response;
        Headers = headers;
    }

    public override string ToString()
    {
        return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
    }

}
[System.CodeDom.Compiler.GeneratedCode("NSwag", "11.2.0.0")]
public class SwaggerException<TResult> : SwaggerException
{
    public TResult Result { get; private set; }

    public SwaggerException(
        string message,
        string statusCode,
        string response,
        System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers,
        TResult result,
        System.Exception innerException)
        : base(message, statusCode, response, headers, innerException)
    {
        Result = result;
    }
}
